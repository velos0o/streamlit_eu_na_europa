import streamlit as st
from .data_loader import carregar_dados_cartorio
from .analysis import (
    criar_visao_geral_cartorio,
    analyze_cartorio_ids,
    analisar_familias_ausentes,
    analisar_familia_certidoes,
    analisar_acompanhamento_emissao_familia
)
from .visualization import visualizar_cartorio_dados
from .movimentacoes import analisar_produtividade as analisar_movimentacoes
from .produtividade import analisar_produtividade_etapas
import pandas as pd
import io
from datetime import datetime

def show_cartorio():
    """
    Exibe a p√°gina principal do Cart√≥rio com layout e clareza aprimorados.
    """
    # T√≠tulo principal da p√°gina
    st.markdown("""
    <h1 style="font-size: 2.5rem; font-weight: 700; color: #1A237E; text-align: center;
    margin-bottom: 1rem; padding-bottom: 8px; border-bottom: 3px solid #1976D2;
    font-family: Arial, Helvetica, sans-serif;">
    Painel de Controle - Cart√≥rio</h1>
    """, unsafe_allow_html=True)
    st.markdown("<p style='text-align: center; font-size: 1rem; color: #555; font-family: Arial, Helvetica, sans-serif; margin-bottom: 1.5rem;'>Monitoramento do funil de emiss√µes e qualidade dos dados.</p>", unsafe_allow_html=True)

    # Carregar os dados dos cart√≥rios
    with st.spinner("Carregando dados dos cart√≥rios..."):
        df_cartorio = carregar_dados_cartorio()

    if df_cartorio.empty:
        st.warning("N√£o foi poss√≠vel carregar os dados dos cart√≥rios. Verifique a conex√£o com o Bitrix24.")
        return
    else:
        st.success(f"Dados carregados: {len(df_cartorio)} registros encontrados.")
        st.divider() # Adiciona um separador

    # Filtro de cart√≥rio (mantido no topo para aplica√ß√£o global)
    st.markdown("#### Filtros Gerais")
    cartorio_filter = st.multiselect(
        "Selecione os Cart√≥rios:",
        options=sorted(df_cartorio['NOME_CARTORIO'].unique()), # Op√ß√µes din√¢micas
        default=sorted(df_cartorio['NOME_CARTORIO'].unique()), # Padr√£o: todos
        help="Selecione um ou mais cart√≥rios para filtrar os dados exibidos abaixo."
    )

    # Aplicar filtro de cart√≥rio aos dados
    if cartorio_filter:
        df_cartorio_filtrado = df_cartorio[df_cartorio['NOME_CARTORIO'].isin(cartorio_filter)].copy()
        st.info(f"Exibindo dados para: {', '.join(cartorio_filter)}")
    else:
        st.warning("Nenhum cart√≥rio selecionado. Exibindo todos os dados.")
        df_cartorio_filtrado = df_cartorio.copy()

    st.divider() # Adiciona um separador

    # Adicionar CSS para as abas (mantido)
    st.markdown("""
    <style>
    .stTabs [data-baseweb="tab"] {
        font-weight: 600 !important; /* Ajuste no peso da fonte */
        color: #1A237E !important;
        height: 55px !important; /* Ajuste na altura */
        padding: 8px 18px !important; /* Ajuste no padding */
        font-size: 1rem !important; /* Tamanho de fonte padr√£o */
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        margin-right: 5px !important;
        border-radius: 8px 8px 0 0 !important;
        border-bottom: 2px solid transparent !important; /* Borda inferior sutil */
    }
    .stTabs [aria-selected="true"] {
        background-color: #E3F2FD !important; /* Cor de fundo mais suave */
        color: #1976D2 !important; /* Cor do texto */
        font-weight: 700 !important; /* Destaque para aba ativa */
        border-bottom: 3px solid #FF9800 !important; /* Borda inferior destacada */
    }
    .stTabs [data-baseweb="tab-list"] {
        margin-bottom: 25px !important; /* Aumento do espa√ßamento */
        gap: 8px !important; /* Ajuste no espa√ßamento entre abas */
    }
    /* Estilo para expanders */
    .streamlit-expanderHeader {
        font-size: 1.1rem !important;
        font-weight: 600 !important;
        color: #1A237E !important;
        background-color: #f0f2f6 !important; /* Fundo suave */
        border-radius: 5px !important;
        padding: 10px 15px !important;
    }
    /* Estilo para t√≠tulos dentro das abas */
    h2.tab-title {
        font-size: 1.8rem;
        font-weight: 600;
        color: #1A237E;
        text-align: center;
        margin-bottom: 1rem;
        padding-bottom: 6px;
        border-bottom: 2px solid #1976D2;
    }
    </style>
    """, unsafe_allow_html=True)

    # Mostrar informa√ß√µes relevantes com a nova estrutura de abas
    if not df_cartorio_filtrado.empty:
        # Criar 6 abas reorganizadas
        tab_visao_geral, tab_prod_etapas, tab_movimentacoes, tab_acomp_emissao, tab_qualidade, tab_visao_anterior = st.tabs([
            "üìä Vis√£o Geral",
            "‚è±Ô∏è Produtividade por Etapas",
            "üîÑ Movimenta√ß√µes",
            "üìà Acompanhamento Emiss√£o",
            "üîç Qualidade dos Dados",
            "üìë Vis√£o Anterior"
        ])

        # Aba 1: Vis√£o Geral
        with tab_visao_geral:
            st.markdown("<h2 class='tab-title'>Vis√£o Geral dos Dados</h2>", unsafe_allow_html=True)
            st.caption("Tabela com os dados brutos filtrados dos cart√≥rios selecionados.")
            visualizar_cartorio_dados(df_cartorio_filtrado)
            # Gr√°fico de distribui√ß√£o por cart√≥rio (mantido comentado)
            # st.subheader("Distribui√ß√£o por Cart√≥rio")
            # visualizar_grafico_cartorio(df_cartorio_filtrado)

        # Aba 2: Produtividade por Etapas
        with tab_prod_etapas:
            st.markdown("<h2 class='tab-title'>Produtividade por Etapas</h2>", unsafe_allow_html=True)
            st.markdown("""
            <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-bottom: 15px;">
                <p style="margin: 0;">An√°lise da produtividade baseada nas datas de conclus√£o de cada etapa do processo.
                Filtre por per√≠odo (dia, semana, m√™s) e por respons√°vel.</p>
                <p style="margin-top: 10px; font-size: 14px; color: #666;">
                    <strong>Nota:</strong> Considera os campos de data espec√≠ficos de cada etapa.
                </p>
            </div>
            """, unsafe_allow_html=True)
            analisar_produtividade_etapas(df_cartorio_filtrado) # Passando o df filtrado

        # Aba 3: Movimenta√ß√µes
        with tab_movimentacoes:
            st.markdown("<h2 class='tab-title'>An√°lise de Movimenta√ß√µes</h2>", unsafe_allow_html=True)
            st.caption("An√°lise geral de movimenta√ß√µes e produtividade (m√©todo anterior).")
            # Conte√∫do original da Aba 6
            analisar_movimentacoes(df_cartorio_filtrado) # Usando alias e passando o df filtrado

        # Aba 4: Acompanhamento Emiss√£o
        with tab_acomp_emissao:
            st.markdown("<h2 class='tab-title'>Acompanhamento de Emiss√£o por Fam√≠lia</h2>", unsafe_allow_html=True)
            # Conte√∫do original da Aba 3 (renomeada)
            # Explica√ß√£o do processo com estilo aprimorado
            st.markdown("""
            <div style="background-color: #E8EAF6; padding: 18px; border-radius: 8px; margin-bottom: 20px;
            border-left: 5px solid #3F51B5; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <p style="margin: 0; font-size: 1rem; color: #283593;">Acompanhamento do percentual de conclus√£o das certid√µes solicitadas por fam√≠lia.</p>
                <p style="margin-top: 12px; font-size: 0.9rem; color: #455A64;">
                    <strong>Nota:</strong> Certid√µes em etapas de Sucesso no Bitrix s√£o consideradas conclu√≠das.
                </p>
            </div>
            """, unsafe_allow_html=True)

            # Carregar dados (a fun√ß√£o n√£o depende do filtro de cart√≥rio aplicado aqui, busca dados gerais)
            with st.spinner("Carregando dados de acompanhamento..."):
                # Idealmente, a fun√ß√£o analisar_acompanhamento_emissao_familia tamb√©m deveria aceitar o filtro,
                # mas mantendo como est√° por enquanto.
                df_acompanhamento = analisar_acompanhamento_emissao_familia()

            if df_acompanhamento is not None and not df_acompanhamento.empty:
                # Aplicar filtro de ID Fam√≠lia se o df_cartorio_filtrado tiver essa coluna
                if 'ID_FAMILIA' in df_cartorio_filtrado.columns and 'ID_FAMILIA' in df_acompanhamento.columns:
                    ids_filtrados = df_cartorio_filtrado['ID_FAMILIA'].unique()
                    df_acompanhamento_filtrado = df_acompanhamento[df_acompanhamento['ID_FAMILIA'].isin(ids_filtrados)]
                    st.info(f"Exibindo acompanhamento para {len(df_acompanhamento_filtrado)} fam√≠lias presentes nos cart√≥rios selecionados.")
                else:
                    df_acompanhamento_filtrado = df_acompanhamento # Mostrar todos se n√£o for poss√≠vel filtrar

                if not df_acompanhamento_filtrado.empty:
                    # Exibi√ß√£o de estat√≠sticas gerais (m√©tricas) com mais estilo
                    st.markdown("<h3 style='color: #1A237E; margin-top: 30px; font-size: 1.3rem;'>Resumo Geral do Acompanhamento</h3>", unsafe_allow_html=True)

                    # Calcular estat√≠sticas com base nos dados filtrados
                    total_familias = len(df_acompanhamento_filtrado)
                    total_certidoes = df_acompanhamento_filtrado['TOTAL_CERTIDOES'].sum()
                    total_concluidas = df_acompanhamento_filtrado['CERTIDOES_CONCLUIDAS'].sum()
                    percentual_geral = (total_concluidas / total_certidoes * 100) if total_certidoes > 0 else 0

                    # M√©tricas em cards com cores
                    m_col1, m_col2, m_col3, m_col4 = st.columns(4)
                    with m_col1:
                        st.markdown("""
                        <div style="background-color: #E3F2FD; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 5px rgba(0,0,0,0.1); height: 110px; display: flex; flex-direction: column; justify-content: center;">
                            <h2 style="margin:0; color: #1565C0; font-size: 2rem;">{total_familias}</h2>
                            <p style="margin:0; color: #1976D2; font-weight: bold; font-size: 0.9rem;">Fam√≠lias Analisadas</p>
                        </div>
                        """, unsafe_allow_html=True)
                    with m_col2:
                        st.markdown("""
                        <div style="background-color: #E8F5E9; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 5px rgba(0,0,0,0.1); height: 110px; display: flex; flex-direction: column; justify-content: center;">
                            <h2 style="margin:0; color: #2E7D32; font-size: 2rem;">{total_certidoes}</h2>
                            <p style="margin:0; color: #388E3C; font-weight: bold; font-size: 0.9rem;">Total de Certid√µes</p>
                        </div>
                        """, unsafe_allow_html=True)
                    with m_col3:
                        st.markdown("""
                        <div style="background-color: #FFF8E1; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 5px rgba(0,0,0,0.1); height: 110px; display: flex; flex-direction: column; justify-content: center;">
                            <h2 style="margin:0; color: #FF8F00; font-size: 2rem;">{total_concluidas}</h2>
                            <p style="margin:0; color: #FFA000; font-weight: bold; font-size: 0.9rem;">Certid√µes Conclu√≠das</p>
                        </div>
                        """, unsafe_allow_html=True)
                    with m_col4:
                        st.markdown("""
                        <div style="background-color: #FFEBEE; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 5px rgba(0,0,0,0.1); height: 110px; display: flex; flex-direction: column; justify-content: center;">
                            <h2 style="margin:0; color: #C62828; font-size: 2rem;">{percentual_geral:.1f}%</h2>
                            <p style="margin:0; color: #D32F2F; font-weight: bold; font-size: 0.9rem;">Percentual Conclu√≠do</p>
                        </div>
                        """, unsafe_allow_html=True)

                    # Separador visual
                    st.divider()

                    # T√≠tulo da tabela com estilo
                    st.markdown("<h3 style='color: #1A237E; font-size: 1.3rem;'>Detalhamento por Fam√≠lia</h3>", unsafe_allow_html=True)

                    # Preparar dataframe para exibi√ß√£o
                    df_display = df_acompanhamento_filtrado.copy()
                    df_display['PERCENTUAL_TEXTO'] = df_display['PERCENTUAL_CONCLUSAO'].apply(lambda x: f"{x:.1f}%")

                    # Exibir tabela com os dados
                    st.dataframe(
                        df_display,
                        column_config={
                            "ID_FAMILIA": st.column_config.TextColumn("ID Fam√≠lia", help="Identificador √∫nico da fam√≠lia", width="medium"),
                            "NOME_FAMILIA": st.column_config.TextColumn("Nome da Fam√≠lia", help="Nome da fam√≠lia registrado", width="large"),
                            "TOTAL_REQUERENTES": st.column_config.NumberColumn("Requerentes", format="%d", help="Quantidade de requerentes", width="small"),
                            "TOTAL_CERTIDOES": st.column_config.NumberColumn("Total Cert.", format="%d", help="Total de certid√µes solicitadas", width="small"),
                            "CERTIDOES_CONCLUIDAS": st.column_config.NumberColumn("Conclu√≠das", format="%d", help="Certid√µes conclu√≠das", width="small"),
                            "PERCENTUAL_TEXTO": st.column_config.TextColumn("Perc. Texto", help="Percentual conclu√≠do", width="small"),
                            "PERCENTUAL_CONCLUSAO": st.column_config.ProgressColumn("% Conclus√£o", min_value=0, max_value=100, format=" ", help="Progresso visual") # Format vazio para mostrar s√≥ barra
                        },
                        use_container_width=True,
                        hide_index=True
                    )

                    # Bot√µes de a√ß√£o
                    btn_col1, btn_col2 = st.columns([1, 4])
                    with btn_col1:
                        if st.button("üîÑ Atualizar Dados", key="atualizar_acomp", type="primary", help="Recarrega os dados de acompanhamento"):
                            st.rerun()
                    with btn_col2:
                        csv = df_acompanhamento_filtrado.to_csv(index=False).encode('utf-8')
                        st.download_button(
                            label="üì• Exportar para CSV",
                            data=csv,
                            file_name=f"acompanhamento_emissao_familia_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                            mime="text/csv",
                            help="Baixar os dados detalhados em formato CSV"
                        )

                    # Informa√ß√µes sobre etapas de sucesso (mantido em expander)
                    with st.expander("Defini√ß√£o de Etapas de Sucesso", expanded=False):
                        st.markdown("""
                        <div style="background-color: #F5F5F5; padding: 15px; border-radius: 6px;">
                            <h4 style="color: #1A237E; margin-top: 0;">Etapas que contam como certid√µes conclu√≠das:</h4>
                            <ul style="margin-bottom: 0; padding-left: 20px; font-size: 0.9rem;">
                                <li><code>SUCCESS</code> - Sucesso geral</li>
                                <li><code>DT1052_16:SUCCESS</code> - Sucesso Casa Verde</li>
                                <li><code>DT1052_34:SUCCESS</code> - Sucesso Tatuap√©</li>
                                <li><code>DT1052_16:UC_JRGCW3</code> - Certid√£o Pronta Casa Verde</li>
                                <li><code>DT1052_34:UC_84B1S2</code> - Certid√£o Pronta Tatuap√©</li>
                                <li><code>UC_JRGCW3</code> - Certid√£o Pronta (gen√©rico)</li>
                                <li><code>UC_84B1S2</code> - Certid√£o Pronta (gen√©rico)</li>
                                <li><code>DT1052_16:CLIENT</code> - Entregue ao Cliente Casa Verde</li>
                                <li><code>DT1052_34:CLIENT</code> - Entregue ao Cliente Tatuap√©</li>
                                <li><code>DT1052_34:UC_D0RG5P</code> - Finaliza√ß√£o espec√≠fica Tatuap√©</li>
                                <li><code>CLIENT</code> - Entregue ao Cliente (gen√©rico)</li>
                                <li><code>UC_D0RG5P</code> - Finaliza√ß√£o espec√≠fica (gen√©rico)</li>
                            </ul>
                        </div>
                        """, unsafe_allow_html=True)
                else:
                    st.info("Nenhuma fam√≠lia encontrada para os cart√≥rios selecionados nesta an√°lise.")
            else:
                # Mensagem de erro estilizada (mantida)
                st.markdown("""
                <div style="background-color: #FFEBEE; padding: 15px; border-radius: 8px; margin-top: 20px;
                border-left: 5px solid #C62828; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                    <p style="margin: 0; color: #B71C1C; font-weight: bold;">Erro ao carregar dados</p>
                    <p style="margin-top: 8px; color: #D32F2F;">
                        N√£o foi poss√≠vel carregar os dados de acompanhamento. Verifique a conex√£o ou os logs.
                    </p>
                </div>
                """, unsafe_allow_html=True)
                if st.button("üîÑ Tentar Novamente", key="tentar_acomp", type="primary"):
                    st.rerun()

        # Aba 5: Qualidade dos Dados (Agrupando antigas abas 4, 5, 7)
        with tab_qualidade:
            st.markdown("<h2 class='tab-title'>An√°lises de Qualidade dos Dados</h2>", unsafe_allow_html=True)
            st.caption("Verifica√ß√µes de higieniza√ß√£o, IDs de fam√≠lia e consist√™ncia dos cadastros.")
            st.divider()

            # Expander 1: An√°lise Detalhada de Higieniza√ß√£o (antiga Aba 4)
            with st.expander("An√°lise Detalhada de Higieniza√ß√£o", expanded=False):
                st.markdown("""
                <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-bottom: 15px;">
                    <p style="margin: 0;">Cruzamento de dados das fam√≠lias entre tabelas do Bitrix,
                    exibindo informa√ß√µes sobre respons√°veis, certid√µes e status de higieniza√ß√£o.</p>
                    <p style="margin-top: 10px; font-size: 14px; color: #666;">
                        <strong>Nota:</strong> A an√°lise completa pode levar alguns instantes.
                    </p>
                </div>
                """, unsafe_allow_html=True)

                if st.button("Executar An√°lise de Higieniza√ß√£o", key="exec_higienizacao"):
                    with st.spinner("Analisando higieniza√ß√£o..."):
                        df_analise_hig = analisar_familia_certidoes() # Fun√ß√£o original

                    if df_analise_hig is not None and not df_analise_hig.empty:
                        st.write("Resultado da An√°lise de Higieniza√ß√£o:")

                        # Adicionar filtros (adaptados da vers√£o original)
                        f_col_resp, f_col_cart = st.columns(2)
                        with f_col_resp:
                            responsaveis_hig = ['Todos'] + sorted(df_analise_hig['RESPONSAVEL_ADM'].dropna().unique().tolist())
                            resp_sel_hig = st.selectbox("Filtrar por Respons√°vel ADM:", responsaveis_hig, key="resp_hig")
                        with f_col_cart:
                            cartorios_hig = ['Todos'] + sorted(df_analise_hig['CARTORIO'].dropna().unique().tolist())
                            cart_sel_hig = st.selectbox("Filtrar por Cart√≥rio:", cartorios_hig, key="cart_hig")

                        # Aplicar filtros
                        df_filtrado_hig = df_analise_hig.copy()
                        if resp_sel_hig != 'Todos':
                            df_filtrado_hig = df_filtrado_hig[df_filtrado_hig['RESPONSAVEL_ADM'] == resp_sel_hig]
                        if cart_sel_hig != 'Todos':
                            df_filtrado_hig = df_filtrado_hig[df_filtrado_hig['CARTORIO'] == cart_sel_hig]

                        # M√©tricas (adaptadas)
                        st.markdown("<h4 style='margin-top: 20px;'>Resumo Filtrado:</h4>", unsafe_allow_html=True)
                        m_hig_col1, m_hig_col2, m_hig_col3, m_hig_col4 = st.columns(4)
                        with m_hig_col1:
                            st.metric("Fam√≠lias", len(df_filtrado_hig))
                        with m_hig_col2:
                            media_membros_hig = df_filtrado_hig['MEMBROS'].mean() if 'MEMBROS' in df_filtrado_hig.columns and not df_filtrado_hig['MEMBROS'].empty else 0
                            st.metric("M√©dia Membros", f"{media_membros_hig:.1f}")
                        with m_hig_col3:
                            total_cert_hig = df_filtrado_hig['TOTAL_CERTIDOES'].sum()
                            entregues_hig = df_filtrado_hig['CERTIDOES_ENTREGUES'].sum()
                            taxa_hig = (entregues_hig / total_cert_hig * 100) if total_cert_hig > 0 else 0
                            st.metric("Taxa Entrega", f"{taxa_hig:.1f}%")
                        with m_hig_col4:
                            total_req_hig = df_filtrado_hig['TOTAL_REQUERENTES'].sum() if 'TOTAL_REQUERENTES' in df_filtrado_hig.columns else 0
                            st.metric("Total Requerentes", f"{total_req_hig}")

                        # Tabela (adaptada)
                        st.dataframe(
                            df_filtrado_hig[[
                                'ID_FAMILIA', 'NOME', 'CARTORIO', 'RESPONSAVEL_ADM', 'RESPONSAVEL_VENDAS',
                                'TOTAL_CERTIDOES', 'CERTIDOES_ENTREGUES', 'MEMBROS', 'TOTAL_REQUERENTES',
                                'ID_REQUERENTE', 'STATUS_HIGILIZACAO'
                            ]].rename(columns={ # Renomeando para melhor leitura
                                'ID_FAMILIA': 'ID Fam√≠lia', 'NOME': 'Nome Fam√≠lia', 'CARTORIO': 'Cart√≥rio',
                                'RESPONSAVEL_ADM': 'Resp. ADM', 'RESPONSAVEL_VENDAS': 'Resp. Vendas',
                                'TOTAL_CERTIDOES': 'Total Cert.', 'CERTIDOES_ENTREGUES': 'Entregues',
                                'MEMBROS': 'Membros', 'TOTAL_REQUERENTES': 'Requerentes', 'ID_REQUERENTE': 'ID Requerente',
                                'STATUS_HIGILIZACAO': 'Status Hig.'
                            }),
                            use_container_width=True,
                            hide_index=True
                        )
                        # Adicionar exporta√ß√£o para CSV
                        csv_hig = df_filtrado_hig.to_csv(index=False).encode('utf-8')
                        st.download_button(
                            label="üì• Exportar An√°lise Higieniza√ß√£o (CSV)",
                            data=csv_hig,
                            file_name=f"analise_higienizacao_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                            mime="text/csv",
                            key="export_hig"
                        )
                    elif df_analise_hig is not None:
                         st.info("Nenhum dado encontrado na an√°lise de higieniza√ß√£o.")
                    else:
                        st.error("Erro ao realizar a an√°lise de higieniza√ß√£o. Verifique os logs.")
                else:
                    st.info("Clique no bot√£o acima para executar a an√°lise detalhada de higieniza√ß√£o.")

            st.divider() # Separador entre expanders

            # Expander 2: Verifica√ß√£o de IDs de Fam√≠lia (antiga Aba 5)
            with st.expander("Verifica√ß√£o de IDs de Fam√≠lia (Duplicados, Inv√°lidos)", expanded=False):
                st.markdown("""
                <p style="margin-bottom: 15px;">Identifica IDs de fam√≠lia que est√£o duplicados, vazios ou fora do padr√£o esperado nos registros dos cart√≥rios selecionados.</p>
                """, unsafe_allow_html=True)

                # Usar o df_cartorio_filtrado que j√° tem o filtro de cart√≥rio aplicado
                with st.spinner("Analisando IDs de fam√≠lia..."):
                     # Adicionar verifica√ß√£o se a coluna existe antes de chamar a an√°lise
                    if 'ID_FAMILIA' in df_cartorio_filtrado.columns:
                         family_id_summary, family_id_details = analyze_cartorio_ids(df_cartorio_filtrado)
                    else:
                         family_id_summary, family_id_details = pd.DataFrame(), pd.DataFrame() # DataFrames vazios se a coluna n√£o existir
                         st.warning("Coluna 'ID_FAMILIA' n√£o encontrada nos dados carregados para esta an√°lise.")

                if family_id_summary is not None and not family_id_summary.empty:
                    st.markdown("##### Resumo da Verifica√ß√£o")
                    st.dataframe(
                        family_id_summary,
                        column_config={
                            "Status": st.column_config.TextColumn("Status do ID", width="medium", help="Classifica√ß√£o do ID"),
                            "Quantidade": st.column_config.NumberColumn("Quantidade", format="%d", width="small", help="N√∫mero de registros")
                        },
                        use_container_width=True,
                        hide_index=True
                    )

                    st.markdown("##### Detalhes dos IDs com Problemas")
                    # Filtros para o detalhamento (simplificados, usando dados j√° filtrados por cart√≥rio)
                    status_options = family_id_details['Status do ID'].unique()
                    selected_id_status = st.multiselect(
                        "Filtrar por Status do ID:",
                        options=status_options,
                        default=[s for s in status_options if s != 'Padr√£o Correto'], # Padr√£o: mostrar problemas
                        key="status_id_filter",
                        help="Selecione os status que deseja visualizar nos detalhes."
                    )

                    resp_options = sorted(family_id_details['Respons√°vel'].dropna().unique())
                    resp_filter = st.multiselect(
                        "Filtrar por Respons√°vel:",
                        options=resp_options,
                        key="resp_id_filter",
                        help="Selecione os respons√°veis."
                    )

                    # Aplicar filtros adicionais
                    filtered_details = family_id_details.copy()
                    if selected_id_status:
                        filtered_details = filtered_details[filtered_details['Status do ID'].isin(selected_id_status)]
                    if resp_filter:
                        filtered_details = filtered_details[filtered_details['Respons√°vel'].isin(resp_filter)]

                    if not filtered_details.empty:
                        st.dataframe(
                            filtered_details,
                            column_config={
                                "ID": st.column_config.TextColumn("ID Registro", width="small"),
                                "Nome": st.column_config.TextColumn("Nome Registro", width="medium"),
                                "ID Fam√≠lia": st.column_config.TextColumn("ID Fam√≠lia", width="medium"),
                                "Cart√≥rio": st.column_config.TextColumn("Cart√≥rio", width="medium"),
                                "Respons√°vel": st.column_config.TextColumn("Respons√°vel", width="medium"),
                                "Status do ID": st.column_config.TextColumn("Status ID", width="small")
                            },
                            use_container_width=True,
                            hide_index=True,
                            key="details_id_table"
                        )

                        # Bot√£o para exportar Excel
                        output = io.BytesIO()
                        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                            family_id_summary.to_excel(writer, sheet_name='Resumo_IDs', index=False)
                            filtered_details.to_excel(writer, sheet_name='Detalhes_IDs', index=False)
                        excel_data = output.getvalue()

                        st.download_button(
                            label="üì• Exportar Verifica√ß√£o de IDs (Excel)",
                            data=excel_data,
                            file_name=f"verificacao_ids_familia_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            key="export_ids_excel"
                        )
                    else:
                        st.info("Nenhum registro encontrado com os filtros de status e respons√°vel selecionados.")
                elif family_id_summary is not None:
                     st.info("Nenhum problema encontrado nos IDs de fam√≠lia para os cart√≥rios selecionados.")
                # N√£o mostrar erro se a coluna 'ID_FAMILIA' n√£o foi encontrada, j√° foi avisado antes.

            st.divider() # Separador entre expanders

            # Expander 3: Confronto Emiss√£o vs Cadastro Fam√≠lias (antiga Aba 7)
            with st.expander("Confronto Emiss√£o vs Cadastro de Fam√≠lias", expanded=False):
                st.markdown("""
                <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-bottom: 15px;">
                    <p style="margin: 0;">Compara neg√≥cios da categoria 'Emiss√£o' (ID 32) com o cadastro geral de fam√≠lias,
                    identificando neg√≥cios cuja fam√≠lia associada n√£o est√° cadastrada no sistema.</p>
                    <p style="margin-top: 10px; font-size: 14px; color: #666;">
                        <strong>Nota:</strong> A an√°lise completa pode levar alguns instantes.
                    </p>
                </div>
                """, unsafe_allow_html=True)

                if st.button("Executar An√°lise de Confronto", key="exec_confronto"):
                    # A fun√ß√£o original analisar_familias_ausentes n√£o parece depender do df_cartorio,
                    # ela busca dados espec√≠ficos (categoria 32 e cadastro geral). Mantendo assim.
                    with st.spinner("Realizando confronto de dados..."):
                        total_ausentes, df_ausentes = analisar_familias_ausentes()

                    if df_ausentes is not None and total_ausentes > 0:
                        st.markdown("""
                        <div style="background-color: #ffebee; padding: 15px; border-radius: 10px; border-left: 5px solid #e53935; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                            <h4 style="margin-top: 0; color: #c62828;">Neg√≥cios com Fam√≠lias N√£o Cadastradas: <span style='font-size: 1.5rem; font-weight: bold;'>{total_ausentes}</span></h4>
                            <p style="font-size: 0.9rem; margin-bottom: 0;">
                                Neg√≥cios da categoria 32 que referenciam IDs de fam√≠lia (<code>UF_CRM_1722605592778</code>)
                                que n√£o foram encontrados no cadastro geral (<code>UF_CRM_12_1723552666</code>).
                            </p>
                        </div>
                        """, unsafe_allow_html=True)

                        st.subheader("Detalhes dos Neg√≥cios Afetados")
                        st.dataframe(
                            df_ausentes,
                            use_container_width=True,
                            hide_index=True,
                            column_config={
                                "ID do Neg√≥cio": st.column_config.NumberColumn("ID Neg√≥cio", format="%d"),
                                "Nome do Neg√≥cio": "Nome Neg√≥cio",
                                "Respons√°vel": "Respons√°vel",
                                "ID da Fam√≠lia": st.column_config.TextColumn("ID Fam√≠lia (N√£o Cadastrada)")
                            }
                        )

                        csv_ausentes = df_ausentes.to_csv(index=False).encode('utf-8')
                        st.download_button(
                            label="üì• Exportar Neg√≥cios Ausentes (CSV)",
                            data=csv_ausentes,
                            file_name=f"negocios_familias_nao_cadastradas_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                            mime="text/csv",
                            key="export_ausentes"
                        )
                    elif df_ausentes is not None and total_ausentes == 0:
                        st.success("‚úÖ Confronto realizado! Todos os neg√≥cios da categoria 32 possuem fam√≠lias cadastradas.")
                    else:
                         st.error("Erro ao realizar a an√°lise de confronto. Verifique os logs.")
                else:
                    st.info("Clique no bot√£o acima para executar a an√°lise de confronto.")


        # Aba 6: Vis√£o Anterior
        with tab_visao_anterior:
            st.markdown("<h2 class='tab-title'>Vis√£o Anterior (Agregada)</h2>", unsafe_allow_html=True)
            st.caption("Vis√£o agregada por cart√≥rio (m√©todo anterior).")
            # Conte√∫do original da Aba 8
            with st.spinner("Gerando vis√£o anterior..."):
                visao_geral_anterior = criar_visao_geral_cartorio(df_cartorio_filtrado) # Passando o df filtrado

            if visao_geral_anterior is not None and not visao_geral_anterior.empty:
                st.dataframe(visao_geral_anterior, use_container_width=True, hide_index=True)
            elif visao_geral_anterior is not None:
                 st.info("Nenhum dado dispon√≠vel para a vis√£o anterior com os filtros aplicados.")
            else:
                st.error("N√£o foi poss√≠vel gerar a vis√£o anterior. Verifique os dados ou logs.")
    else:
        st.info("Nenhum dado dispon√≠vel para os cart√≥rios selecionados.")

    # Rodap√©
    st.divider()
    st.caption(f"Painel Cart√≥rio | Dados atualizados em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}") 