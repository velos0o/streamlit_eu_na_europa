import streamlit as st
from .data_loader import carregar_dados_comune, carregar_dados_negocios, carregar_estagios_bitrix
from .analysis import criar_visao_geral_comune, criar_visao_macro, cruzar_comune_deal, analisar_distribuicao_deals, analisar_registros_sem_correspondencia, calcular_tempo_solicitacao, criar_metricas_certidoes, criar_metricas_tempo_dias, calcular_tempo_solicitacao_providencia
from .visualization import (
    visualizar_comune_dados, visualizar_funil_comune, visualizar_grafico_macro,
    visualizar_cruzamento_deal, visualizar_analise_sem_correspondencia,
    visualizar_tempo_solicitacao, visualizar_metricas_certidoes,
    visualizar_metricas_tempo_dias, visualizar_analise_evidencia,
    visualizar_providencias, visualizar_tempo_solicitacao_providencia,
    visualizar_tempo_solicitacao_individual
)

# For√ßar recarregamento do m√≥dulo de visualiza√ß√£o
import importlib
import views.comune.visualization
importlib.reload(views.comune.visualization)
# Reimportar a fun√ß√£o ap√≥s o reload do m√≥dulo
from views.comune.visualization import (
    visualizar_tempo_solicitacao_providencia,
    visualizar_tempo_solicitacao_individual
)

import pandas as pd
import io
from datetime import datetime
import time
import sys
from pathlib import Path

# Adicionar caminhos para importa√ß√£o
api_path = Path(__file__).parents[2] / 'api'
utils_path = Path(__file__).parents[2] / 'utils'
sys.path.insert(0, str(api_path))
sys.path.insert(0, str(utils_path))

# Importar fun√ß√µes necess√°rias
from bitrix_connector import load_bitrix_data
from refresh_utils import handle_refresh_trigger, get_force_reload_status, clear_force_reload_flag

def show_comune():
    """
    Exibe a p√°gina principal do COMUNE
    """
    # Aplicar estilo personalizado para bot√£o de atualiza√ß√£o
    st.markdown("""
    <style>
    div[data-testid="stButton"] button.atualizar-btn {
        background-color: #4CAF50;
        color: white;
        font-weight: bold;
        border: none;
        border-radius: 4px;
        transition-duration: 0.3s;
    }
    div[data-testid="stButton"] button.atualizar-btn:hover {
        background-color: #45a049;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
    }
    </style>
    """, unsafe_allow_html=True)
    
    # T√≠tulo centralizado
    st.markdown("""
    <h1 style="font-size: 2.8rem; font-weight: 900; color: #1A237E; text-align: center; 
    margin-bottom: 1.5rem; padding-bottom: 10px; border-bottom: 4px solid #1976D2;
    font-family: Arial, Helvetica, sans-serif;">
    <strong>Comune Bitrix24</strong></h1>
    """, unsafe_allow_html=True)
    st.markdown("<p style='text-align: center; font-size: 16px; color: #555; font-family: Arial, Helvetica, sans-serif;'>Monitoramento completo do processo de emiss√£o de documentos de Comune.</p>", unsafe_allow_html=True)
    
    # Bot√£o de atualiza√ß√£o no topo da p√°gina
    col1, col2 = st.columns([5, 1])
    with col2:
        if st.button("üîÑ Atualizar Dados", key="btn_atualizar_comune", help="For√ßa a atualiza√ß√£o dos dados ignorando o cache", type="primary", use_container_width=True):
            with st.spinner("Atualizando dados e limpando cache..."):
                # Mostrar mensagem de feedback
                st.info("Limpando cache e recarregando dados em tempo real...")
                
                # Limpar todos os caches antes de recarregar
                st.cache_data.clear()
                
                # Limpar tamb√©m o cache espec√≠fico da API Bitrix
                load_bitrix_data.clear()
                
                # Definir flags no estado da sess√£o para consist√™ncia com o resto do projeto
                st.session_state['full_refresh'] = True
                st.session_state['force_reload'] = True
                st.session_state['loading_state'] = 'loading'
                
                # Pequena pausa para garantir que o cache seja completamente limpo
                time.sleep(0.5)
                st.success("Cache limpo! Recarregando p√°gina...")
                time.sleep(0.5)
                st.rerun()
        
        # Texto de ajuda para o bot√£o de atualiza√ß√£o
        st.caption("""
        Use este bot√£o para for√ßar a atualiza√ß√£o 
        dos dados em tempo real e limpar o cache
        """)
    
    # Verificar se h√° atualiza√ß√£o global acionada por outro bot√£o do sistema
    if handle_refresh_trigger():
        # Indicar que estamos atualizando
        st.info("‚è≥ Atualizando dados como parte de uma atualiza√ß√£o global...")
        time.sleep(0.5)
        st.rerun()
    
    # Se estiver for√ßando recarregamento, exibir indicador
    force_reload = get_force_reload_status()
    if force_reload:
        st.info("‚è≥ Dados sendo atualizados diretamente da API (ignorando cache)...")
        # Limpar a flag ap√≥s seu uso
        clear_force_reload_flag()
    
    # Carregar os dados
    with st.spinner("Carregando dados..."):
        df_comune = carregar_dados_comune(force_reload=force_reload)
        df_deal, df_deal_uf = carregar_dados_negocios(force_reload=force_reload)
        
        # Salvar o df_comune na sess√£o para uso em outras fun√ß√µes
        st.session_state['df_comune'] = df_comune
    
    if df_comune.empty:
        st.warning("N√£o foi poss√≠vel carregar os dados de COMUNE. Verifique a conex√£o com o Bitrix24.")
        return
    else:
        st.success(f"Dados carregados com sucesso: {len(df_comune)} registros encontrados.")
    
    # Adicionar CSS para aumentar o contraste das abas
    st.markdown("""
    <style>
    .stTabs [data-baseweb="tab"] {
        font-weight: 900 !important;
        color: #1A237E !important;
        height: 60px !important;
        padding: 10px 20px !important;
        font-size: 18px !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        margin-right: 5px !important;
        border-radius: 8px 8px 0 0 !important;
    }
    .stTabs [aria-selected="true"] {
        background-color: #1976D2 !important;
        color: white !important;
        font-weight: 900 !important;
        border-bottom: 4px solid #FF9800 !important;
    }
    .stTabs [data-baseweb="tab-list"] {
        margin-bottom: 20px !important;
        gap: 10px !important;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Mostrar todas as informa√ß√µes relevantes em abas
    if not df_comune.empty:
        # Criar abas para organizar o conte√∫do
        tab_nomes = [
            "Distribui√ß√£o por Est√°gio",
            "Dados Detalhados",
            "Funil Detalhado",
            "Cruzamento CRM_DEAL",
            "üìä M√©tricas de Certid√µes",
            "‚è≥ Tempo em Dias",
            "‚è±Ô∏è Tempo Individual",
            "üó∫Ô∏è Tempo x Prov√≠ncia",
            "üìÑ Evidencia Comprovante",
            "üáÆüáπ PROV√çNCIA",
        ]
        tabs = st.tabs(tab_nomes)

        # Mapear nomes para √≠ndices para facilitar acesso
        tab_map = {name: i for i, name in enumerate(tab_nomes)}

        # Aba 1: Distribui√ß√£o por Est√°gio
        with tabs[tab_map["Distribui√ß√£o por Est√°gio"]]:
            # Criar vis√£o macro
            visao_macro = criar_visao_macro(df_comune)
            
            # Exibir m√©tricas principais
            if not visao_macro.empty:
                # Exibir gr√°fico com vis√£o macro usando um estilo melhorado
                st.markdown("""
                <h3 style="font-size: 28px; font-weight: 900; color: #1A237E; text-align: center; 
                margin: 30px 0 20px 0; padding-bottom: 10px; border-bottom: 3px solid #E0E0E0;
                font-family: Arial, Helvetica, sans-serif;">
                DISTRIBUI√á√ÉO POR EST√ÅGIO</h3>
                <p style="text-align: center; font-size: 18px; color: #555; margin-bottom: 25px; font-family: Arial, Helvetica, sans-serif;">
                Vis√£o detalhada da distribui√ß√£o de processos em cada est√°gio</p>
                """, unsafe_allow_html=True)
                
                # Adicionar um coment√°rio explicativo antes do gr√°fico
                st.markdown("""
                <div style="background-color: #f5f5f5; 
                            padding: 15px; 
                            border-radius: 8px; 
                            margin-bottom: 20px;
                            border-left: 5px solid #1976D2;
                            font-family: Arial, Helvetica, sans-serif;">
                    <p style="font-size: 16px; margin: 0; color: #333; font-weight: 500;">
                        O gr√°fico abaixo mostra a distribui√ß√£o dos registros entre todos os est√°gios do processo.
                        Visualize a propor√ß√£o de cada tipo para identificar poss√≠veis gargalos ou oportunidades de melhoria.
                    </p>
                </div>
                """, unsafe_allow_html=True)
                
                # Exibir o gr√°fico
                visualizar_grafico_macro(visao_macro)
            else:
                st.info("N√£o foi poss√≠vel criar a vis√£o macro. Verifique se os dados est√£o corretos.")
        
        # Aba 2: Dados Detalhados
        with tabs[tab_map["Dados Detalhados"]]:
            # Exibir tabela com os dados
            visualizar_comune_dados(df_comune)
        
        # Aba 3: Funil Detalhado
        with tabs[tab_map["Funil Detalhado"]]:
            # Criar vis√£o geral
            visao_geral = criar_visao_geral_comune(df_comune)
            
            # Exibir vis√£o geral em tabela
            if not visao_geral.empty:
                st.subheader("Vis√£o Geral dos Est√°gios")
                st.dataframe(visao_geral, use_container_width=True)
                
                # Exibir gr√°fico de funil
                visualizar_funil_comune(visao_geral)
            else:
                st.info("N√£o foi poss√≠vel criar a vis√£o geral. Verifique se os dados est√£o corretos.")
        
        # Aba 4: Cruzamento com CRM_DEAL
        with tabs[tab_map["Cruzamento CRM_DEAL"]]:
            # Adicionar informa√ß√µes sobre o cruzamento
            st.markdown("""
            <div style="background-color: #f0f2f6; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                <h3 style="color: #1A237E; margin-top: 0;">Cruzamento COMUNE x CRM_DEAL</h3>
                <p>Este cruzamento relaciona registros do COMUNE (CRM_DYNAMIC_1052, Category ID 22) com 
                neg√≥cios do CRM (CRM_DEAL, Category ID 32).</p>
                <p><strong>Campos utilizados para o cruzamento:</strong></p>
                <ul>
                    <li>COMUNE: <code>UF_CRM_12_1723552666</code></li>
                    <li>CRM_DEAL: <code>UF_CRM_1722605592778</code></li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
            
            # Verificar se temos dados de neg√≥cios
            if not df_deal.empty and not df_deal_uf.empty:
                try:
                    # Mostrar contagem de registros
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric(
                            label="Registros COMUNE", 
                            value=len(df_comune),
                            delta=None
                        )
                    with col2:
                        st.metric(
                            label="Neg√≥cios (Category ID 32)", 
                            value=len(df_deal),
                            delta=None
                        )
                    
                    # Cruzar dados
                    with st.spinner("Processando cruzamento de dados..."):
                        df_cruzado = cruzar_comune_deal(df_comune, df_deal, df_deal_uf)
                    
                    if not df_cruzado.empty and 'STAGE_NAME' in df_cruzado.columns and 'TEM_DEAL' in df_cruzado.columns:
                        # Calcular estat√≠sticas b√°sicas
                        total_registros = len(df_cruzado)
                        registros_com_match = df_cruzado['TEM_DEAL'].sum()
                        registros_sem_match = total_registros - registros_com_match
                        
                        # Adicionar controles de filtro
                        st.markdown("""
                        <hr style="margin: 1.5rem 0">
                        <h3 style="color: #1A237E; margin-top: 1rem;">Filtros de An√°lise</h3>
                        """, unsafe_allow_html=True)
                        
                        col1, col2 = st.columns(2)
                        
                        # Filtro para tipo de correspond√™ncia
                        with col1:
                            tipo_correspondencia = st.radio(
                                "Mostrar registros:",
                                options=["Todos", "Apenas com correspond√™ncia", "Apenas sem correspond√™ncia"],
                                index=0,
                                horizontal=True
                            )
                        
                        # Filtro para est√°gio
                        with col2:
                            # Obter lista de est√°gios √∫nicos
                            estagios = ["Todos"] + sorted(df_cruzado['STAGE_NAME'].unique().tolist())
                            estagio_selecionado = st.selectbox(
                                "Filtrar por est√°gio:",
                                options=estagios,
                                index=0
                            )
                        
                        # Aplicar filtros ao DataFrame
                        df_filtrado = df_cruzado.copy()
                        
                        # Filtrar por tipo de correspond√™ncia
                        if tipo_correspondencia == "Apenas com correspond√™ncia":
                            df_filtrado = df_filtrado[df_filtrado['TEM_DEAL']]
                            st.success(f"Mostrando {len(df_filtrado)} registros que possuem correspond√™ncia em CRM_DEAL")
                        elif tipo_correspondencia == "Apenas sem correspond√™ncia":
                            df_filtrado = df_filtrado[~df_filtrado['TEM_DEAL']]
                            st.warning(f"Mostrando {len(df_filtrado)} registros que N√ÉO possuem correspond√™ncia em CRM_DEAL")
                        
                        # Filtrar por est√°gio
                        if estagio_selecionado != "Todos":
                            df_filtrado = df_filtrado[df_filtrado['STAGE_NAME'] == estagio_selecionado]
                            st.info(f"Filtrado para est√°gio: {estagio_selecionado} ({len(df_filtrado)} registros)")
                        
                        # Op√ß√µes adicionais de filtro e pesquisa
                        if not df_filtrado.empty:
                            st.markdown("#### Op√ß√µes adicionais de filtro")
                            pesquisa_texto = st.text_input(
                                "Pesquisar por texto no t√≠tulo ou ID:",
                                placeholder="Digite o texto para pesquisar..."
                            )
                            
                            # Aplicar pesquisa por texto
                            if pesquisa_texto:
                                if 'TITLE' in df_filtrado.columns:
                                    mask_title = df_filtrado['TITLE'].astype(str).str.contains(pesquisa_texto, case=False, na=False)
                                    df_filtrado = df_filtrado[mask_title]
                                    st.info(f"Pesquisando por '{pesquisa_texto}' - {len(df_filtrado)} resultados encontrados")
                            
                            # Adicionar bot√£o para exportar registros filtrados
                            col1, col2 = st.columns(2)
                            with col1:
                                # Preparar buffer para o arquivo Excel
                                buffer = io.BytesIO()
                                
                                # Criar um escritor Excel
                                with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
                                    # Escrever o DataFrame filtrado em uma planilha
                                    df_filtrado.to_excel(writer, sheet_name='Registros_Filtrados', index=False)
                                
                                # Oferecer download do arquivo
                                st.download_button(
                                    label="üì• Exportar registros filtrados",
                                    data=buffer.getvalue(),
                                    file_name=f"comune_filtrados_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                                    mime="application/vnd.ms-excel"
                                )
                            
                            with col2:
                                if "Apenas sem correspond√™ncia" in tipo_correspondencia:
                                    st.info("Use esta exporta√ß√£o para identificar todos os registros que precisam ser verificados em CRM_DEAL")
                        
                        # Adicionar tabela de IDs de Fam√≠lia que n√£o existem no Comune
                        st.markdown("<hr style='margin: 1.5rem 0'>", unsafe_allow_html=True)
                        st.subheader("IDs de Fam√≠lia que n√£o existem no Comune")
                        
                        # Obter valores √∫nicos de UF_CRM_12_1723552666 do Comune (pode conter m√∫ltiplos valores separados por v√≠rgula)
                        valores_comune = set()
                        for valor in df_comune['UF_CRM_12_1723552666'].dropna():
                            if isinstance(valor, str) and ',' in valor:
                                # Separar valores divididos por v√≠rgula
                                for v in valor.split(','):
                                    v_limpo = v.strip()
                                    if v_limpo:
                                        valores_comune.add(v_limpo)
                            else:
                                valores_comune.add(valor)
                        
                        # Criar um DataFrame com IDs de fam√≠lia que n√£o existem no Comune
                        ids_nao_existentes = []
                        for valor in df_deal_uf['UF_CRM_1722605592778'].dropna().unique():
                            if isinstance(valor, str) and ',' in valor:
                                # Separar valores divididos por v√≠rgula
                                for v in valor.split(','):
                                    v_limpo = v.strip()
                                    if v_limpo and v_limpo not in valores_comune:
                                        ids_nao_existentes.append({
                                            'ID_FAMILIA': v_limpo
                                        })
                            elif valor not in valores_comune:
                                ids_nao_existentes.append({
                                    'ID_FAMILIA': valor
                                })
                        
                        # Criar DataFrame com os IDs n√£o existentes
                        df_ids_nao_existentes = pd.DataFrame(ids_nao_existentes)
                        
                        if not df_ids_nao_existentes.empty:
                            st.write(f"Foram encontrados {len(df_ids_nao_existentes)} IDs de fam√≠lia em CRM_DEAL que n√£o existem no Comune.")
                            
                            # Exibir tabela com os IDs
                            st.dataframe(df_ids_nao_existentes, use_container_width=True)
                            
                            # Bot√£o para exportar IDs n√£o existentes
                            buffer_ids = io.BytesIO()
                            with pd.ExcelWriter(buffer_ids, engine='xlsxwriter') as writer:
                                df_ids_nao_existentes.to_excel(writer, sheet_name='IDs_Nao_Existentes', index=False)
                            
                            st.download_button(
                                label="üì• Exportar IDs n√£o existentes em Comune",
                                data=buffer_ids.getvalue(),
                                file_name=f"ids_familia_nao_existentes_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                                mime="application/vnd.ms-excel"
                            )
                        else:
                            st.success("Todos os IDs de fam√≠lia em CRM_DEAL existem no Comune.")
                        
                        # Analisar distribui√ß√£o de deals
                        distribuicao = analisar_distribuicao_deals(df_cruzado)
                        
                        if not distribuicao.empty:
                            st.markdown("<hr style='margin: 1.5rem 0'>", unsafe_allow_html=True)
                            st.subheader("Distribui√ß√£o por Est√°gio")
                            
                            # Exibir visualiza√ß√£o do cruzamento
                            visualizar_cruzamento_deal(distribuicao)
                            
                            # Adicionar an√°lise detalhada para registros sem correspond√™ncia
                            if registros_sem_match > 0:
                                st.markdown("<hr style='margin: 1.5rem 0'>", unsafe_allow_html=True)
                                
                                # Expandir para mostrar an√°lise detalhada
                                with st.expander("An√°lise Detalhada - Registros sem Correspond√™ncia", expanded=tipo_correspondencia=="Apenas sem correspond√™ncia"):
                                    # Fazer an√°lise detalhada dos registros sem correspond√™ncia
                                    resumo_sem_match = analisar_registros_sem_correspondencia(df_cruzado)
                                    
                                    # Visualizar an√°lise
                                    visualizar_analise_sem_correspondencia(resumo_sem_match)
                            
                            # Exibir registros filtrados em tabela
                            if not df_filtrado.empty:
                                st.subheader(f"Registros Filtrados ({len(df_filtrado)})")
                                
                                # Selecionar colunas relevantes para exibi√ß√£o
                                colunas_exibicao = [
                                    'TITLE', 'STAGE_NAME', 'UF_CRM_12_1723552666', 
                                    'DEAL_ID', 'UF_CRM_1722605592778', 'ASSIGNED_BY_NAME'
                                ]
                                
                                # Verificar quais colunas existem no DataFrame
                                colunas_disponiveis = [col for col in colunas_exibicao if col in df_filtrado.columns]
                                
                                # Exibir os registros filtrados
                                st.dataframe(df_filtrado[colunas_disponiveis], use_container_width=True)
                            else:
                                st.warning("Nenhum registro encontrado com os filtros aplicados.")
                        else:
                            st.info("N√£o foi poss√≠vel gerar a distribui√ß√£o dos dados. Verifique a estrutura dos dados.")
                    else:
                        st.info("O cruzamento dos dados n√£o possui as colunas necess√°rias para an√°lise.")
                except Exception as e:
                    st.error(f"Erro ao processar o cruzamento: {str(e)}")
                    st.info("Detalhes do erro podem ser encontrados no console do Streamlit.")
            else:
                st.warning("N√£o foi poss√≠vel carregar os dados de neg√≥cios para cruzamento.")
                
                # Exibir detalhes sobre os dados
                if df_deal.empty:
                    st.error("Nenhum registro encontrado em CRM_DEAL com CATEGORY_ID=32")
                else:
                    st.success(f"Encontrados {len(df_deal)} registros em CRM_DEAL")
                
                if df_deal_uf.empty:
                    st.error("Nenhum registro encontrado em CRM_DEAL_UF para os neg√≥cios filtrados")
                else:
                    st.success(f"Encontrados {len(df_deal_uf)} registros em CRM_DEAL_UF")
        
        # Aba: M√©tricas de Certid√µes
        with tabs[tab_map["üìä M√©tricas de Certid√µes"]]:
            # Criar m√©tricas de certid√µes
            metricas_certidoes = criar_metricas_certidoes(df_comune)
            
            # Exibir m√©tricas de certid√µes
            visualizar_metricas_certidoes(metricas_certidoes)
        
        # Aba: Tempo em Dias
        with tabs[tab_map["‚è≥ Tempo em Dias"]]:
            # Criar m√©tricas de tempo em dias
            metricas_tempo_dias = criar_metricas_tempo_dias(df_comune)
            
            # Exibir m√©tricas de tempo em dias
            visualizar_metricas_tempo_dias(metricas_tempo_dias)
        
        # Aba: Tempo Individual
        with tabs[tab_map["‚è±Ô∏è Tempo Individual"]]:
            st.markdown("""
            ### An√°lise Individual de Tempo de Solicita√ß√£o
            Esta se√ß√£o permite visualizar o tempo decorrido para cada solicita√ß√£o individualmente,
            calculado a partir da data original da solicita√ß√£o.
            """, unsafe_allow_html=True)
            # Chamar a nova fun√ß√£o de visualiza√ß√£o passando o df_comune completo
            visualizar_tempo_solicitacao_individual(df_comune)
        
        # Aba: Tempo x Prov√≠ncia
        with tabs[tab_map["üó∫Ô∏è Tempo x Prov√≠ncia"]]:
            # Calcular o tempo de solicita√ß√£o por provid√™ncia (AGREGADO)
            # Chamar a fun√ß√£o SEM o par√¢metro extra ou com ele False
            df_tempo_providencia = calcular_tempo_solicitacao_providencia(df_comune, retornar_dados_individuais=False)
            # Visualizar o cruzamento entre tempo de solicita√ß√£o e provid√™ncia
            visualizar_tempo_solicitacao_providencia(df_tempo_providencia)
        
        # Aba Evidencia
        with tabs[tab_map["üìÑ Evidencia Comprovante"]]:
            # Chamar a fun√ß√£o de visualiza√ß√£o da an√°lise de evid√™ncia
            visualizar_analise_evidencia(df_comune)
        
        # Aba PROV√çNCIA
        with tabs[tab_map["üáÆüáπ PROV√çNCIA"]]:
            # Chamar a fun√ß√£o de visualiza√ß√£o por provid√™ncia
            visualizar_providencias(df_comune)
    
    # Adicionar download dos dados
    if not df_comune.empty:
        st.markdown("---")
        st.subheader("Download dos Dados")
        
        # Preparar buffer para o arquivo Excel
        buffer = io.BytesIO()
        
        # Criar um escritor Excel
        with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
            # Escrever os DataFrames em diferentes planilhas
            df_comune.to_excel(writer, sheet_name='Dados_COMUNE', index=False)
            
            # Se tiver vis√£o geral, adicionar tamb√©m
            try:
                visao_geral = criar_visao_geral_comune(df_comune)
                if not visao_geral.empty:
                    visao_geral.to_excel(writer, sheet_name='Visao_Geral', index=False)
                
                visao_macro = criar_visao_macro(df_comune)
                if not visao_macro.empty:
                    visao_macro.to_excel(writer, sheet_name='Visao_Macro', index=False)
            except Exception as e:
                st.error(f"Erro ao criar planilhas auxiliares: {str(e)}")
        
        # Oferecer download do arquivo
        st.download_button(
            label="üì• Baixar Dados em Excel",
            data=buffer.getvalue(),
            file_name=f"comune_bitrix24_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            mime="application/vnd.ms-excel"
        ) 