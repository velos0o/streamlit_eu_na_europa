import streamlit as st
import pandas as pd
from datetime import datetime, time
import numpy as np
import os # Importar os para manipula√ß√£o de caminhos

# Fun√ß√µes que podem ser √∫teis
from .utils import simplificar_nome_estagio, fetch_supabase_producao_data, carregar_dados_usuarios_bitrix

# Obter o diret√≥rio do arquivo atual
_PRODUCAO_ADM_DIR = os.path.dirname(os.path.abspath(__file__))
# Construir o caminho para a pasta assets subindo dois n√≠veis (views/cartorio_new -> streamlit_eu_na_europa)
_ASSETS_DIR = os.path.join(_PRODUCAO_ADM_DIR, '..', '..', 'assets')
_CSS_PATH = os.path.join(_ASSETS_DIR, 'styles', 'css', 'main.css')

# Lista de IDs dos ADMs relevantes (como strings)
LISTA_IDS_ADMS_RELEVANTES = [
    "284", "66", "194", "614", "288", "344", 
    "106",  # Lucas Veloso
    "342", "186", "616", "148"
]
# Lista com o prefixo "user_" para facilitar a checagem com dados do Supabase
LISTA_IDS_ADMS_RELEVANTES_COM_PREFIXO = LISTA_IDS_ADMS_RELEVANTES + [f"user_{id_adm}" for id_adm in LISTA_IDS_ADMS_RELEVANTES]

# Est√°gios de devolu√ß√£o/pend√™ncia ADM monitorados
ESTAGIOS_DEVOLUCAO_ADM = [
    'DEVOLU√á√ÉO ADM', 
    'DEVOLVIDO REQUERIMENTO',
    'DEVOLUTIVA BUSCA - CRC',
    'APENAS ASS. REQ CLIENTE P/MONTAGEM'
]

def exibir_producao_adm(df_cartorio_original):
    st.markdown('<div class="cartorio-container cartorio-container--info">', unsafe_allow_html=True)
    st.title("Dashboard de Pend√™ncias ADM")
    
    # --- Carregar CSS Compilado ---
    try:
        # Usar o caminho absoluto calculado
        print(f"[Debug Produ√ß√£o ADM] Tentando carregar CSS de: {_CSS_PATH}")
        if os.path.exists(_CSS_PATH):
            with open(_CSS_PATH, 'r', encoding='utf-8') as f:
                css_content = f.read()
                print(f"[Debug Produ√ß√£o ADM] CSS carregado com sucesso. Tamanho: {len(css_content)} bytes.")
                
                # Injetar o CSS na p√°gina
                st.markdown(f'<style>{css_content}</style>', unsafe_allow_html=True)
        else:
            st.warning(f"Arquivo CSS principal n√£o encontrado em: {_CSS_PATH}")
            print(f"[Debug Produ√ß√£o ADM] Falha ao carregar CSS: Arquivo n√£o existe em {_CSS_PATH}")
    except Exception as e:
        st.error(f"Ocorreu um erro inesperado ao carregar o CSS em Produ√ß√£o ADM: {e}")
        print(f"[Debug Produ√ß√£o ADM] Erro detalhado: {str(e)}")
    
    # Remover CSS inline espec√≠fico - usar apenas classes SCSS
    st.markdown("---")

    # --- Carregar Mapa de Usu√°rios ---
    df_usuarios = carregar_dados_usuarios_bitrix()
    mapa_usuarios = {}
    if not df_usuarios.empty:
        df_usuarios['ID'] = df_usuarios['ID'].astype(str)
        mapa_usuarios = pd.Series(df_usuarios.FULL_NAME.values, index=df_usuarios.ID).to_dict()
        for user_id_str, full_name in list(mapa_usuarios.items()):
            mapa_usuarios[f"user_{user_id_str}"] = full_name
    else:
        st.warning("Mapeamento de nomes de usu√°rio n√£o dispon√≠vel. Os IDs dos respons√°veis podem ser exibidos.")

    if df_cartorio_original is None or df_cartorio_original.empty:
        st.warning("Dados de cart√≥rio n√£o dispon√≠veis para an√°lise de produ√ß√£o ADM.")
        return

    df = df_cartorio_original.copy()

    # --- FILTRO INICIAL POR ADMS RELEVANTES ---
    col_adm_pasta_bitrix = 'UF_CRM_34_ADM_DE_PASTA'
    nomes_adms_relevantes_para_filtro_bitrix = []
    if col_adm_pasta_bitrix in df.columns:
        nomes_adms_relevantes_map = {id_adm: mapa_usuarios.get(id_adm, mapa_usuarios.get(f"user_{id_adm}", f"ID_DESCONHECIDO_{id_adm}")) for id_adm in LISTA_IDS_ADMS_RELEVANTES}
        nomes_adms_relevantes_para_filtro_bitrix = [name for name in nomes_adms_relevantes_map.values() if not name.startswith("ID_DESCONHECIDO")]
        
        df[col_adm_pasta_bitrix] = df[col_adm_pasta_bitrix].fillna("Desconhecido").astype(str)
        df_original_len = len(df)
        df = df[df[col_adm_pasta_bitrix].isin(nomes_adms_relevantes_para_filtro_bitrix)]
        if df.empty and nomes_adms_relevantes_para_filtro_bitrix:
            st.warning(f"Nenhum dado encontrado no Bitrix para os ADMs de Pasta relevantes: {', '.join(nomes_adms_relevantes_para_filtro_bitrix)}")
    else:
        st.warning(f"Coluna ADM de Pasta ('{col_adm_pasta_bitrix}') n√£o encontrada nos dados do Bitrix. O filtro de ADM principal n√£o ser√° aplicado.")

    if 'STAGE_ID' in df.columns:
        df['ESTAGIO_ATUAL_LEGIVEL'] = df['STAGE_ID'].apply(simplificar_nome_estagio)
    else:
        st.error("Coluna STAGE_ID n√£o encontrada para determinar o est√°gio atual.")
        return
    
    # --- Filtro de Per√≠odo para An√°lise de Resolu√ß√µes ---
    st.subheader("üóìÔ∏è Filtros para An√°lise")
    
    # Filtro de per√≠odo
    col_data1, col_data2 = st.columns(2)
    with col_data1:
        data_inicio_analise = st.date_input("Data Inicial", value=datetime.now().date() - pd.Timedelta(days=30), key="data_inicio_resol_adm_geral")
    with col_data2:
        data_fim_analise = st.date_input("Data Final", value=datetime.now().date(), key="data_fim_resol_adm_geral")

    if data_inicio_analise > data_fim_analise:
        st.warning("A data inicial da an√°lise n√£o pode ser posterior √† data final.")
        return
    
    # Filtro de Consultor (ADM)
    if mapa_usuarios:
        # Criar uma lista de nomes baseada nos IDs relevantes
        nomes_adms_para_filtro = [mapa_usuarios.get(id_adm, mapa_usuarios.get(f"user_{id_adm}", f"ID {id_adm}")) 
                                 for id_adm in LISTA_IDS_ADMS_RELEVANTES]
        # Remover duplicatas e ordenar
        nomes_adms_para_filtro = sorted(list(set(nomes_adms_para_filtro)))
        # Adicionar op√ß√£o para selecionar todos
        nomes_adms_para_filtro = ['Todos os ADMs'] + nomes_adms_para_filtro
        
        adm_selecionado = st.selectbox("Filtrar por Consultor (ADM)", 
                                      options=nomes_adms_para_filtro,
                                      index=0)
    else:
        adm_selecionado = 'Todos os ADMs'
        st.warning("Mapeamento de usu√°rios n√£o dispon√≠vel. Mostrando todos os ADMs.")
    
    # Filtro de Tipo de Pend√™ncia
    tipos_pendencia_para_filtro = ['Todos os Tipos'] + ESTAGIOS_DEVOLUCAO_ADM
    tipo_pendencia_selecionado = st.selectbox("Filtrar por Tipo de Pend√™ncia", 
                                           options=tipos_pendencia_para_filtro,
                                           index=0)
    
    st.info(f"""
    **Filtros aplicados:**
    - Per√≠odo: {data_inicio_analise.strftime('%d/%m/%Y')} a {data_fim_analise.strftime('%d/%m/%Y')}
    - Consultor: {adm_selecionado}
    - Tipo de Pend√™ncia: {tipo_pendencia_selecionado}
    """)
    
    st.markdown("---")

    # --- Carregar Dados do Supabase para o per√≠odo selecionado ---
    with st.spinner(f"Carregando dados..."):
        df_supabase = pd.DataFrame()
        dados_supabase_raw = fetch_supabase_producao_data(
            data_inicio_analise.strftime('%Y-%m-%d'),
            data_fim_analise.strftime('%Y-%m-%d')
        )
        if dados_supabase_raw is not None and not dados_supabase_raw.empty:
            df_supabase = pd.DataFrame(dados_supabase_raw)
            if 'data_criacao' in df_supabase.columns:
                df_supabase['data_criacao'] = pd.to_datetime(df_supabase['data_criacao'], format='ISO8601', errors='coerce')
            
            # Verificar se a coluna estagio_id existe ou procurar por alternativas
            col_estagio = None
            if 'estagio_id' in df_supabase.columns:
                col_estagio = 'estagio_id'
            elif 'stage_id' in df_supabase.columns:
                col_estagio = 'stage_id'
            elif 'STAGE_ID' in df_supabase.columns:
                col_estagio = 'STAGE_ID'
            
            if col_estagio:
                df_supabase['_TEMP_STAGE_NAME'] = df_supabase[col_estagio].apply(simplificar_nome_estagio)
                df_supabase['STAGE_NAME_PADRONIZADO'] = df_supabase['_TEMP_STAGE_NAME'].apply(
                    lambda x: x.split('/')[-1].strip() if isinstance(x, str) and '/' in x else x
                )
                df_supabase.drop(columns=['_TEMP_STAGE_NAME'], inplace=True)
            else:
                st.warning(f"Coluna de est√°gio n√£o encontrada nos dados do Supabase. Colunas dispon√≠veis: {df_supabase.columns.tolist()}")
                df_supabase['STAGE_NAME_PADRONIZADO'] = None
        else:
            st.warning("Nenhum dado de hist√≥rico encontrado no Supabase para o per√≠odo selecionado.")
        
        if not df_supabase.empty and 'id_card' in df_supabase.columns and 'data_criacao' in df_supabase.columns:
            df_supabase = df_supabase.sort_values(by=['id_card', 'data_criacao'])
            df_supabase['PROXIMO_ESTAGIO_PADRONIZADO'] = df_supabase.groupby('id_card')['STAGE_NAME_PADRONIZADO'].shift(-1)
            df_supabase['PROXIMA_DATA_CRIACAO'] = df_supabase.groupby('id_card')['data_criacao'].shift(-1)
            df_supabase['PROXIMO_MOVED_BY_ID'] = df_supabase.groupby('id_card')['movido_por_id'].shift(-1)
            if 'id' in df_supabase.columns:
                df_supabase['PROXIMA_MOVIMENTACAO_SUPABASE_ID'] = df_supabase.groupby('id_card')['id'].shift(-1)
        else:
            if df_supabase.empty:
                st.warning("N√£o foram encontrados dados no Supabase para o per√≠odo selecionado.")
            else:
                df_supabase['PROXIMO_ESTAGIO_PADRONIZADO'] = None
                df_supabase['PROXIMA_DATA_CRIACAO'] = None
                df_supabase['PROXIMO_MOVED_BY_ID'] = None
                if 'id' in df_supabase.columns:
                    df_supabase['PROXIMA_MOVIMENTACAO_SUPABASE_ID'] = None

    # --- VIS√ÉO GERAL SIMPLIFICADA ---
    st.subheader("üìå Resumo de Pend√™ncias e Resolu√ß√µes")
    
    # 1. Total de Pend√™ncias Ativas por ADM
    df_pendencias_ativas_bitrix = df[df['ESTAGIO_ATUAL_LEGIVEL'].isin(ESTAGIOS_DEVOLUCAO_ADM)].copy()
    
    # Aplicar filtro de tipo de pend√™ncia selecionado
    if tipo_pendencia_selecionado != 'Todos os Tipos':
        df_pendencias_ativas_bitrix = df_pendencias_ativas_bitrix[
            df_pendencias_ativas_bitrix['ESTAGIO_ATUAL_LEGIVEL'] == tipo_pendencia_selecionado
        ]
    
    # Aplicar filtro de ADM selecionado
    if adm_selecionado != 'Todos os ADMs' and col_adm_pasta_bitrix in df_pendencias_ativas_bitrix.columns:
        df_pendencias_ativas_bitrix = df_pendencias_ativas_bitrix[
            df_pendencias_ativas_bitrix[col_adm_pasta_bitrix] == adm_selecionado
        ]
    
    total_pendencias_ativas = len(df_pendencias_ativas_bitrix)
    
    contagem_ativas_por_adm = pd.Series(dtype='int')
    if not df_pendencias_ativas_bitrix.empty and col_adm_pasta_bitrix in df_pendencias_ativas_bitrix.columns:
        df_pendencias_ativas_bitrix[col_adm_pasta_bitrix] = df_pendencias_ativas_bitrix[col_adm_pasta_bitrix].fillna('ADM Desconhecido')
        df_pendencias_ativas_bitrix.loc[df_pendencias_ativas_bitrix[col_adm_pasta_bitrix].str.strip() == '', col_adm_pasta_bitrix] = 'ADM Desconhecido'
        contagem_ativas_por_adm = df_pendencias_ativas_bitrix.groupby(col_adm_pasta_bitrix).size()
    
    # 2. Coletar todas as resolu√ß√µes
    lista_dfs_pendencias_resolvidas = []
    if not df_supabase.empty:
        col_id_bitrix_map = 'ID'
        col_id_supabase_map = 'id_card'
        for tipo_pendencia in ESTAGIOS_DEVOLUCAO_ADM:
            # Pular se n√£o for o tipo selecionado (quando um tipo espec√≠fico for selecionado)
            if tipo_pendencia_selecionado != 'Todos os Tipos' and tipo_pendencia != tipo_pendencia_selecionado:
                continue
                
            _, df_detalhe_resolvidas_tipo = analisar_resolucao_pendencia(
                df_bitrix_atual=df,
                df_supabase_hist=df_supabase,
                nome_pendencia_especifica=tipo_pendencia,
                lista_todos_estagios_pendencia=ESTAGIOS_DEVOLUCAO_ADM,
                col_adm_pasta_bitrix=col_adm_pasta_bitrix,
                col_id_bitrix=col_id_bitrix_map,
                col_id_supabase=col_id_supabase_map,
                mapa_nomes_usuarios=mapa_usuarios,
                renderizar_saida_streamlit=False,
                filtro_adm=adm_selecionado
            )
            if df_detalhe_resolvidas_tipo is not None and not df_detalhe_resolvidas_tipo.empty:
                lista_dfs_pendencias_resolvidas.append(df_detalhe_resolvidas_tipo)
    
    df_todas_pendencias_resolvidas = pd.DataFrame()
    total_pendencias_resolvidas = 0
    if lista_dfs_pendencias_resolvidas:
        df_todas_pendencias_resolvidas = pd.concat(lista_dfs_pendencias_resolvidas, ignore_index=True)
        
        # Aplicar filtro de ADM selecionado para resolu√ß√µes
        if adm_selecionado != 'Todos os ADMs' and 'Respons√°vel pela Resolu√ß√£o' in df_todas_pendencias_resolvidas.columns:
            df_todas_pendencias_resolvidas = df_todas_pendencias_resolvidas[
                df_todas_pendencias_resolvidas['Respons√°vel pela Resolu√ß√£o'] == adm_selecionado
            ]
            
        total_pendencias_resolvidas = len(df_todas_pendencias_resolvidas)
    
    # 3. Exibir M√©tricas Resumidas
    col1, col2, col3 = st.columns(3)
    
    st.markdown('<div class="producao-adm producao-adm__metricas">', unsafe_allow_html=True)
    col1.metric("Total de Pend√™ncias Ativas", f"{total_pendencias_ativas}")
    col2.metric("Total de Pend√™ncias Resolvidas", f"{total_pendencias_resolvidas}")
    
    # Calcular percentual de resolu√ß√£o se existirem pend√™ncias
    total_geral = total_pendencias_ativas + total_pendencias_resolvidas
    percentual_resolucao = 0
    if total_geral > 0:
        percentual_resolucao = (total_pendencias_resolvidas / total_geral) * 100
    col3.metric("Percentual de Resolu√ß√£o", f"{percentual_resolucao:.1f}%")
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("---")
    
    st.markdown("<h3>üìä An√°lise por ADM</h3>", unsafe_allow_html=True)
    
    # 4. Criar tabela consolidada por ADM com pend√™ncias e resolu√ß√µes
    df_consolidado_adm = pd.DataFrame(index=nomes_adms_relevantes_para_filtro_bitrix if nomes_adms_relevantes_para_filtro_bitrix else list(mapa_usuarios.values()))
    df_consolidado_adm.index.name = 'ADM de Pasta'
    df_consolidado_adm['Pend√™ncias Ativas'] = df_consolidado_adm.index.map(contagem_ativas_por_adm).fillna(0).astype(int)
    df_consolidado_adm['Pend√™ncias Resolvidas'] = 0
    df_consolidado_adm['Tempo M√©dio de Resolu√ß√£o (dias)'] = 0
    
    # 5. Calcular resolu√ß√µes e tempo m√©dio por ADM
    if not df_todas_pendencias_resolvidas.empty and 'ID Respons√°vel pela Resolu√ß√£o' in df_todas_pendencias_resolvidas.columns:
        # Garantir que temos a coluna de Respons√°vel mapeada para nomes
        if 'Respons√°vel pela Resolu√ß√£o' not in df_todas_pendencias_resolvidas.columns:
            df_todas_pendencias_resolvidas['Respons√°vel pela Resolu√ß√£o'] = df_todas_pendencias_resolvidas['ID Respons√°vel pela Resolu√ß√£o'].astype(str).map(mapa_usuarios).fillna(df_todas_pendencias_resolvidas['ID Respons√°vel pela Resolu√ß√£o'])
        
        # Filtrar pelos ADMs relevantes
        df_resolvidas_adms_relevantes = df_todas_pendencias_resolvidas[
            df_todas_pendencias_resolvidas['ID Respons√°vel pela Resolu√ß√£o'].astype(str).isin(LISTA_IDS_ADMS_RELEVANTES_COM_PREFIXO)
        ].copy()
        
        if not df_resolvidas_adms_relevantes.empty:
            # Contagem de resolu√ß√µes por ADM
            contagem_resolvidas_por_adm = df_resolvidas_adms_relevantes.groupby('Respons√°vel pela Resolu√ß√£o').size()
            df_consolidado_adm['Pend√™ncias Resolvidas'] = df_consolidado_adm.index.map(contagem_resolvidas_por_adm).fillna(0).astype(int)
            
            # Tempo m√©dio de resolu√ß√£o por ADM
            if 'Tempo para Resolu√ß√£o (dias)' in df_resolvidas_adms_relevantes.columns:
                tempo_medio_por_adm = df_resolvidas_adms_relevantes.groupby('Respons√°vel pela Resolu√ß√£o')['Tempo para Resolu√ß√£o (dias)'].mean()
                df_consolidado_adm['Tempo M√©dio de Resolu√ß√£o (dias)'] = df_consolidado_adm.index.map(tempo_medio_por_adm).fillna(0).round(1)
    
    # 6. Calcular a Taxa de Convers√£o (novo)
    df_consolidado_adm['Total de Pend√™ncias'] = df_consolidado_adm['Pend√™ncias Ativas'] + df_consolidado_adm['Pend√™ncias Resolvidas']
    df_consolidado_adm['Taxa de Convers√£o (%)'] = (df_consolidado_adm['Pend√™ncias Resolvidas'] / df_consolidado_adm['Total de Pend√™ncias'] * 100).round(1)
    # Substituir NaN (quando Total de Pend√™ncias √© zero) por 0
    df_consolidado_adm['Taxa de Convers√£o (%)'] = df_consolidado_adm['Taxa de Convers√£o (%)'].fillna(0)
    
    # 7. Ordenar e exibir o dataframe consolidado
    df_consolidado_adm = df_consolidado_adm.sort_values(by=['Pend√™ncias Ativas', 'Pend√™ncias Resolvidas'], ascending=[False, False])
    
    # Reorganizar colunas e remover coluna auxiliar
    colunas_ordem_para_exibir = [
        'Pend√™ncias Ativas', 
        'Pend√™ncias Resolvidas', 
        'Taxa de Convers√£o (%)',
        'Tempo M√©dio de Resolu√ß√£o (dias)'
    ]
    df_consolidado_adm = df_consolidado_adm[colunas_ordem_para_exibir]
    
    df_consolidado_adm = df_consolidado_adm.reset_index()
    
    # Aplicar filtro de ADM selecionado √† tabela se n√£o for "Todos os ADMs"
    if adm_selecionado != 'Todos os ADMs':
        df_consolidado_adm = df_consolidado_adm[df_consolidado_adm['ADM de Pasta'] == adm_selecionado]
    
    # Aplicar formata√ß√£o para destacar taxas de convers√£o mais altas
    def highlight_conversao(s):
        """Adiciona formata√ß√£o de cores baseada na taxa de convers√£o"""
        # Verificar se a coluna atual √© a Taxa de Convers√£o (%)
        if s.name != 'Taxa de Convers√£o (%)':
            return [''] * len(s)
        
        # Converter para n√∫meros para fazer as compara√ß√µes
        try:
            values = pd.to_numeric(s)
            is_max = values == values.max()
            is_high = values >= 75
            is_medium = (values >= 50) & (values < 75)
            is_low = (values >= 25) & (values < 50)
            is_very_low = (values < 25) & (values > 0)
            is_zero = values == 0
            
            return ['background-color: #4CAF50; color: white; font-weight: bold' if v else  # verde (m√°ximo)
                    'background-color: #8BC34A; color: black' if h else  # verde claro (alto)
                    'background-color: #FFEB3B; color: black' if m else  # amarelo (m√©dio)
                    'background-color: #FFC107; color: black' if l else  # laranja (baixo)
                    'background-color: #FF9800; color: black' if vl else  # laranja forte (muito baixo)
                    'background-color: #F5F5F5; color: #9E9E9E' if z else ''  # cinza (zero)
                    for v, h, m, l, vl, z in zip(is_max, is_high, is_medium, is_low, is_very_low, is_zero)]
        except:
            # Se houver erro na convers√£o, retornar sem formata√ß√£o
            return [''] * len(s)
    
    # Aplicar estilo √† tabela
    styled_df = df_consolidado_adm.style.apply(highlight_conversao)
    
    # Formatar n√∫meros decimais
    styled_df = styled_df.format({
        'Taxa de Convers√£o (%)': '{:.1f}%',
        'Tempo M√©dio de Resolu√ß√£o (dias)': '{:.1f}'
    })
    
    st.markdown('<div class="producao-adm producao-adm__tabela">', unsafe_allow_html=True)
    st.dataframe(styled_df, use_container_width=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.caption("""
    **Tabela 1: Resumo por ADM**
    - **Pend√™ncias Ativas**: Baseadas no ADM de Pasta
    - **Pend√™ncias Resolvidas**: Baseadas no Respons√°vel pela movimenta√ß√£o
    - **Taxa de Convers√£o**: (Pend√™ncias Resolvidas √∑ Total de Pend√™ncias) √ó 100%
    - **Tempo M√©dio**: Tempo m√©dio entre entrada e resolu√ß√£o da pend√™ncia (em dias)
    """)
    
    # --- EVOLU√á√ÉO DAS RESOLU√á√ïES (GR√ÅFICO) ---
    st.markdown("---")
    st.markdown("<h3>üìà Evolu√ß√£o das Resolu√ß√µes</h3>", unsafe_allow_html=True)
    
    # Verificar se h√° dados para criar o gr√°fico
    if not df_todas_pendencias_resolvidas.empty and 'Data da Resolu√ß√£o' in df_todas_pendencias_resolvidas.columns:
        # Garantir que Data da Resolu√ß√£o √© datetime
        try:
            df_todas_pendencias_resolvidas['Data da Resolu√ß√£o'] = pd.to_datetime(df_todas_pendencias_resolvidas['Data da Resolu√ß√£o'])
        except:
            st.warning("N√£o foi poss√≠vel converter as datas para o formato correto.")
            
        # Criar coluna de data (sem hora) para agrupamento
        df_todas_pendencias_resolvidas['Data Resolu√ß√£o'] = df_todas_pendencias_resolvidas['Data da Resolu√ß√£o'].dt.date
        
        # Agrupar dados por data
        df_para_grafico = df_todas_pendencias_resolvidas.copy()
        
        # Agrupar por data para gr√°fico simplificado com total di√°rio
        df_resol_por_dia = df_para_grafico.groupby('Data Resolu√ß√£o').size().reset_index(name='Resolu√ß√µes')
        
        # Importar Altair para gr√°ficos
        import altair as alt
        
        # Criar gr√°fico de barras com linha de tend√™ncia
        barras = alt.Chart(df_resol_por_dia).mark_bar(
            color='#4CAF50',
            size=40  # Barras ainda mais largas
        ).encode(
            x=alt.X('Data Resolu√ß√£o:T', title='Data', axis=alt.Axis(format='%d/%m/%Y')),
            y=alt.Y('Resolu√ß√µes:Q', title='Quantidade de Resolu√ß√µes'),
            tooltip=['Data Resolu√ß√£o:T', 'Resolu√ß√µes:Q']
        )
        
        # Adicionar n√∫meros em cima das barras
        texto = alt.Chart(df_resol_por_dia).mark_text(
            align='center',
            baseline='bottom',
            dy=-5,  # Deslocamento vertical (acima da barra)
            fontSize=14,
            fontWeight='bold'
        ).encode(
            x='Data Resolu√ß√£o:T',
            y='Resolu√ß√µes:Q',
            text='Resolu√ß√µes:Q'
        )
        
        # Adicionar linha de tend√™ncia
        linha_tendencia = alt.Chart(df_resol_por_dia).transform_regression(
            'Data Resolu√ß√£o', 'Resolu√ß√µes'
        ).mark_line(
            color='red', 
            strokeWidth=3,
            strokeDash=[5, 5]
        ).encode(
            x='Data Resolu√ß√£o:T',
            y='Resolu√ß√µes:Q'
        )
        
        # Combinar gr√°ficos (barras + texto + linha de tend√™ncia)
        chart = (barras + texto + linha_tendencia).properties(
            title='Total de Resolu√ß√µes Di√°rias',
            height=300
        ).configure_title(
            fontSize=16
        )
        
        # Exibir o gr√°fico
        st.markdown('<div class="adm-evolucao-grafico">', unsafe_allow_html=True)
        st.altair_chart(chart, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
    else:
        st.info("N√£o h√° dados suficientes para mostrar a evolu√ß√£o das resolu√ß√µes.")
    
    # --- AN√ÅLISE DETALHADA POR TIPO DE PEND√äNCIA ---
    st.markdown("---")
    st.markdown("<h3>üîç Detalhes por Tipo de Pend√™ncia</h3>", unsafe_allow_html=True)
    
    # 7. Exibir detalhes de cada tipo de pend√™ncia em expansores
    st.markdown('<div class="adm-detalhes-pendencia">', unsafe_allow_html=True)
    if not df_supabase.empty:
        for tipo_pendencia in ESTAGIOS_DEVOLUCAO_ADM:
            # Pular se n√£o for o tipo selecionado (quando um tipo espec√≠fico for selecionado)
            if tipo_pendencia_selecionado != 'Todos os Tipos' and tipo_pendencia != tipo_pendencia_selecionado:
                continue
                
            with st.expander(f"Pend√™ncias: {tipo_pendencia}", expanded=tipo_pendencia_selecionado != 'Todos os Tipos'):
                analisar_resolucao_pendencia(
                    df_bitrix_atual=df, 
                    df_supabase_hist=df_supabase, 
                    nome_pendencia_especifica=tipo_pendencia, 
                    lista_todos_estagios_pendencia=ESTAGIOS_DEVOLUCAO_ADM, 
                    col_adm_pasta_bitrix=col_adm_pasta_bitrix,
                    col_id_bitrix='ID',
                    col_id_supabase='id_card',
                    mapa_nomes_usuarios=mapa_usuarios,
                    renderizar_saida_streamlit=True,
                    filtro_adm=adm_selecionado
                )
    else:
        st.info("Nenhum dado dispon√≠vel para an√°lise detalhada por tipo de pend√™ncia.")
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)  # Fecha cartorio-container

def analisar_resolucao_pendencia(
    df_bitrix_atual, 
    df_supabase_hist, 
    nome_pendencia_especifica, 
    lista_todos_estagios_pendencia,
    col_adm_pasta_bitrix,
    col_id_bitrix,
    col_id_supabase,
    mapa_nomes_usuarios,
    renderizar_saida_streamlit=True,
    filtro_adm='Todos os ADMs'
):
    """
    Analisa a resolu√ß√£o de um tipo espec√≠fico de pend√™ncia.
    """
    if renderizar_saida_streamlit:
        st.markdown(f"**An√°lise de Pend√™ncias: {nome_pendencia_especifica}**")

    if df_supabase_hist.empty:
        if renderizar_saida_streamlit:
            st.info(f"Nenhum dado de hist√≥rico dispon√≠vel para analisar '{nome_pendencia_especifica}'.")
        return None, pd.DataFrame()

    # Filtrar entradas para o tipo de pend√™ncia espec√≠fico
    df_entradas_na_pendencia = df_supabase_hist[
        df_supabase_hist['STAGE_NAME_PADRONIZADO'] == nome_pendencia_especifica
    ].copy()
    
    if df_entradas_na_pendencia.empty:
        if renderizar_saida_streamlit:
            st.info(f"Nenhum item entrou no est√°gio '{nome_pendencia_especifica}' no per√≠odo analisado.")
            # M√©tricas zeradas
            col_metric1, col_metric2, col_metric3 = st.columns(3)
            col_metric1.metric(label=f"Ocorr√™ncias ({nome_pendencia_especifica})", value=0)
            col_metric2.metric(label=f"Resolvidas", value=0)
            col_metric3.metric(label=f"Taxa de Resolu√ß√£o", value="0%")
        return df_entradas_na_pendencia, pd.DataFrame()

    # Calcular m√©tricas b√°sicas
    total_ocorrencias = len(df_entradas_na_pendencia)
    cards_unicos_na_pendencia = df_entradas_na_pendencia[col_id_supabase].nunique()

    # Identificar quais pend√™ncias foram resolvidas (sa√≠ram para um est√°gio n√£o-pend√™ncia)
    df_entradas_na_pendencia['FOI_RESOLVIDA'] = (
        df_entradas_na_pendencia['PROXIMO_ESTAGIO_PADRONIZADO'].notna() & 
        (~df_entradas_na_pendencia['PROXIMO_ESTAGIO_PADRONIZADO'].isin(lista_todos_estagios_pendencia))
    )
    
    # Filtrar apenas as resolvidas para an√°lise
    df_pendencias_resolvidas_detalhe = df_entradas_na_pendencia[df_entradas_na_pendencia['FOI_RESOLVIDA']].copy()
    
    # Calcular m√©tricas de resolu√ß√£o
    total_resolvidas = len(df_pendencias_resolvidas_detalhe)
    taxa_resolucao = (total_resolvidas / total_ocorrencias * 100) if total_ocorrencias > 0 else 0

    # Exibir m√©tricas principais
    if renderizar_saida_streamlit:
        col_metric1, col_metric2, col_metric3 = st.columns(3)
        col_metric1.metric(label=f"Ocorr√™ncias ({nome_pendencia_especifica})", value=f"{total_ocorrencias:,} ({cards_unicos_na_pendencia} √∫nicos)")
        col_metric2.metric(label=f"Resolvidas", value=f"{total_resolvidas:,}")
        col_metric3.metric(label=f"Taxa de Resolu√ß√£o", value=f"{taxa_resolucao:.1f}%")
        st.caption(f"Considera todas as entradas no est√°gio '{nome_pendencia_especifica}' no per√≠odo e verifica se a movimenta√ß√£o seguinte as tirou de um estado de pend√™ncia.")

    # Se n√£o h√° pend√™ncias resolvidas, retornar
    if df_pendencias_resolvidas_detalhe.empty:
        if renderizar_saida_streamlit:
            st.info(f"Nenhuma ocorr√™ncia de '{nome_pendencia_especifica}' foi identificada como resolvida no per√≠odo.")
        return df_entradas_na_pendencia, df_pendencias_resolvidas_detalhe

    # Renomear colunas para melhor apresenta√ß√£o
    df_pendencias_resolvidas_detalhe = df_pendencias_resolvidas_detalhe.rename(
        columns={
            col_id_supabase: 'ID Card',
            'data_criacao': 'Data Entrada na Pend√™ncia',
            'movido_por_id': 'ID Respons√°vel Entrada Pend√™ncia',
            'STAGE_NAME_PADRONIZADO': 'Est√°gio de Pend√™ncia',
            'PROXIMO_ESTAGIO_PADRONIZADO': 'Est√°gio P√≥s-Resolu√ß√£o',
            'PROXIMA_DATA_CRIACAO': 'Data da Resolu√ß√£o',
            'PROXIMO_MOVED_BY_ID': 'ID Respons√°vel pela Resolu√ß√£o'
        }
    )
    
    # Mapear IDs para nomes
    if 'ID Respons√°vel pela Resolu√ß√£o' in df_pendencias_resolvidas_detalhe.columns:
        df_pendencias_resolvidas_detalhe['Respons√°vel pela Resolu√ß√£o'] = df_pendencias_resolvidas_detalhe['ID Respons√°vel pela Resolu√ß√£o'].astype(str).map(mapa_nomes_usuarios).fillna(df_pendencias_resolvidas_detalhe['ID Respons√°vel pela Resolu√ß√£o'])
    
    if 'ID Respons√°vel Entrada Pend√™ncia' in df_pendencias_resolvidas_detalhe.columns:
        df_pendencias_resolvidas_detalhe['Respons√°vel Entrada Pend√™ncia'] = df_pendencias_resolvidas_detalhe['ID Respons√°vel Entrada Pend√™ncia'].astype(str).map(mapa_nomes_usuarios).fillna(df_pendencias_resolvidas_detalhe['ID Respons√°vel Entrada Pend√™ncia'])
    
    # Aplicar filtro de ADM se especificado
    if filtro_adm != 'Todos os ADMs' and 'Respons√°vel pela Resolu√ß√£o' in df_pendencias_resolvidas_detalhe.columns:
        df_pendencias_resolvidas_detalhe = df_pendencias_resolvidas_detalhe[
            df_pendencias_resolvidas_detalhe['Respons√°vel pela Resolu√ß√£o'] == filtro_adm
        ]
        # Recalcular total ap√≥s filtro
        total_resolvidas = len(df_pendencias_resolvidas_detalhe)
    
    # Calcular tempo de resolu√ß√£o
    df_pendencias_resolvidas_detalhe['Tempo para Resolu√ß√£o (dias)'] = (
        (df_pendencias_resolvidas_detalhe['Data da Resolu√ß√£o'] - df_pendencias_resolvidas_detalhe['Data Entrada na Pend√™ncia']).dt.total_seconds() / (24 * 60 * 60)
    ).round(1)

    # Exibir tabelas e estat√≠sticas se renderizar_saida_streamlit=True
    if renderizar_saida_streamlit:
        # Exibir detalhes das pend√™ncias resolvidas
        st.markdown("#### Detalhes das Pend√™ncias Resolvidas")
        
        # Merge com df_bitrix_atual para adicionar ADM da Pasta
        df_pendencias_resolvidas_detalhe['ID Card'] = df_pendencias_resolvidas_detalhe['ID Card'].astype(str)
        df_bitrix_atual_temp = df_bitrix_atual.copy()
        
        if col_id_bitrix in df_bitrix_atual_temp.columns:
            df_bitrix_atual_temp[col_id_bitrix] = df_bitrix_atual_temp[col_id_bitrix].astype(str)
            
            df_pendencias_resolvidas_detalhe_merged = pd.merge(
                df_pendencias_resolvidas_detalhe,
                df_bitrix_atual_temp[[col_id_bitrix, col_adm_pasta_bitrix] if col_adm_pasta_bitrix in df_bitrix_atual_temp.columns else df_bitrix_atual_temp[[col_id_bitrix]]],
                left_on='ID Card',
                right_on=col_id_bitrix,
                how='left'
            )
            
            if col_adm_pasta_bitrix in df_pendencias_resolvidas_detalhe_merged.columns:
                df_pendencias_resolvidas_detalhe_merged[col_adm_pasta_bitrix] = df_pendencias_resolvidas_detalhe_merged[col_adm_pasta_bitrix].fillna('N/A')
            
            # Formatar datas para exibi√ß√£o
            if 'Data Entrada na Pend√™ncia' in df_pendencias_resolvidas_detalhe_merged.columns:
                df_pendencias_resolvidas_detalhe_merged['Data Entrada na Pend√™ncia'] = pd.to_datetime(df_pendencias_resolvidas_detalhe_merged['Data Entrada na Pend√™ncia']).dt.strftime('%d/%m/%Y %H:%M')
            
            if 'Data da Resolu√ß√£o' in df_pendencias_resolvidas_detalhe_merged.columns:
                df_pendencias_resolvidas_detalhe_merged['Data da Resolu√ß√£o'] = pd.to_datetime(df_pendencias_resolvidas_detalhe_merged['Data da Resolu√ß√£o']).dt.strftime('%d/%m/%Y %H:%M')
            
            # Definir colunas a serem exibidas
            colunas_para_exibir = [
                'ID Card', 
                'Respons√°vel pela Resolu√ß√£o', 
                'Data Entrada na Pend√™ncia', 
                'Data da Resolu√ß√£o', 
                'Tempo para Resolu√ß√£o (dias)',
                col_adm_pasta_bitrix
            ]
            
            colunas_existentes = [col for col in colunas_para_exibir if col in df_pendencias_resolvidas_detalhe_merged.columns]
            
            # Exibir tabela de detalhes
            if not df_pendencias_resolvidas_detalhe_merged.empty:
                st.dataframe(df_pendencias_resolvidas_detalhe_merged[colunas_existentes], use_container_width=True)
                
                # Exibir estat√≠sticas do tempo de resolu√ß√£o
                if 'Tempo para Resolu√ß√£o (dias)' in df_pendencias_resolvidas_detalhe_merged.columns and len(df_pendencias_resolvidas_detalhe_merged) > 1:
                    stats_col1, stats_col2, stats_col3 = st.columns(3)
                    with stats_col1:
                        tempo_min = df_pendencias_resolvidas_detalhe_merged['Tempo para Resolu√ß√£o (dias)'].min()
                        st.metric("Tempo M√≠nimo", f"{tempo_min:.1f} dias")
                    with stats_col2:
                        tempo_medio = df_pendencias_resolvidas_detalhe_merged['Tempo para Resolu√ß√£o (dias)'].mean()
                        st.metric("Tempo M√©dio", f"{tempo_medio:.1f} dias")
                    with stats_col3:
                        tempo_max = df_pendencias_resolvidas_detalhe_merged['Tempo para Resolu√ß√£o (dias)'].max()
                        st.metric("Tempo M√°ximo", f"{tempo_max:.1f} dias")
            else:
                st.info("Nenhum detalhe dispon√≠vel ap√≥s o processamento.")
        else:
            st.error(f"Coluna ID '{col_id_bitrix}' n√£o encontrada para merge.")
            st.dataframe(df_pendencias_resolvidas_detalhe, use_container_width=True)

    return df_entradas_na_pendencia, df_pendencias_resolvidas_detalhe 