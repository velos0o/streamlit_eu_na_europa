#!/usr/bin/env python3
"""
Script de Valida√ß√£o - Novos Funis 102 e 104

Este script valida se os novos funis est√£o sendo carregados corretamente
pelo data_loader ap√≥s as corre√ß√µes implementadas.

Execu√ß√£o: python fix_novos_funis.py
"""

import sys
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
path_root = Path(__file__).parent
sys.path.append(str(path_root))

def testar_carregamento_funis():
    """
    Testa se os novos funis 102 e 104 est√£o sendo carregados.
    """
    try:
        from views.cartorio_new.data_loader import carregar_dados_cartorio
        
        print("üîç Testando carregamento dos dados de cart√≥rio...")
        df = carregar_dados_cartorio()
        
        if df.empty:
            print("‚ùå DataFrame vazio - Verifique a conex√£o com o Bitrix")
            return False
            
        # Verificar se a coluna CATEGORY_ID existe
        if 'CATEGORY_ID' not in df.columns:
            print("‚ùå Coluna CATEGORY_ID n√£o encontrada")
            return False
            
        # Verificar quais categorias est√£o presentes
        categorias_presentes = sorted(df['CATEGORY_ID'].unique())
        print(f"üìä Categorias encontradas: {categorias_presentes}")
        
        # Contar registros por categoria
        contagens = df['CATEGORY_ID'].value_counts().sort_index()
        print("\nüìà Distribui√ß√£o de registros:")
        
        nomes_funis = {
            92: "Cart√≥rio Casa Verde",
            94: "Cart√≥rio Tatuap√©", 
            102: "Par√≥quia",
            104: "Pesquisa BR"
        }
        
        total_registros = 0
        funis_encontrados = []
        
        for categoria, count in contagens.items():
            nome = nomes_funis.get(categoria, f"Categoria {categoria}")
            print(f"  ‚Ä¢ {nome}: {count:,} registros")
            total_registros += count
            funis_encontrados.append(categoria)
            
        print(f"\nüìä Total de registros: {total_registros:,}")
        
        # Verificar se os novos funis est√£o presentes
        novos_funis = [102, 104]
        funis_novos_encontrados = [f for f in novos_funis if f in funis_encontrados]
        
        if len(funis_novos_encontrados) == len(novos_funis):
            print("‚úÖ Sucesso! Ambos os novos funis (102 e 104) foram encontrados!")
            
            # Verificar se h√° dados nos novos funis
            tem_dados_102 = 102 in contagens and contagens[102] > 0
            tem_dados_104 = 104 in contagens and contagens[104] > 0
            
            if tem_dados_102 and tem_dados_104:
                print("‚úÖ Excelente! Ambos os novos funis t√™m dados!")
            elif tem_dados_102 or tem_dados_104:
                print("‚ö†Ô∏è Aten√ß√£o: Apenas um dos novos funis tem dados. Isso pode ser normal se um dos funis ainda n√£o tem registros.")
            else:
                print("‚ö†Ô∏è Aten√ß√£o: Os novos funis foram encontrados mas n√£o t√™m dados. Verifique se h√° registros no Bitrix.")
                
        elif len(funis_novos_encontrados) > 0:
            print(f"‚ö†Ô∏è Parcial: Apenas {len(funis_novos_encontrados)} dos 2 novos funis foi encontrado: {funis_novos_encontrados}")
        else:
            print("‚ùå Erro: Nenhum dos novos funis (102 e 104) foi encontrado!")
            print("   Verifique se h√° dados dessas categorias no Bitrix ou se a API est√° funcionando.")
            return False
            
        # Verificar colunas importantes
        colunas_importantes = [
            'STAGE_ID', 
            'UF_CRM_34_ID_FAMILIA', 
            'UF_CRM_34_NOME_FAMILIA',
            'UF_CRM_34_ID_REQUERENTE',
            'ASSIGNED_BY_NAME'
        ]
        
        print("\nüîç Verificando colunas importantes:")
        for coluna in colunas_importantes:
            if coluna in df.columns:
                valores_nao_nulos = df[coluna].notna().sum()
                print(f"  ‚úÖ {coluna}: {valores_nao_nulos:,} valores n√£o-nulos")
            else:
                print(f"  ‚ùå {coluna}: AUSENTE")
                
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        print("   Verifique se todas as depend√™ncias est√£o instaladas.")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def main():
    """
    Fun√ß√£o principal do script de valida√ß√£o.
    """
    print("=" * 60)
    print("üß™ VALIDA√á√ÉO DOS NOVOS FUNIS 102 (PAR√ìQUIA) E 104 (PESQUISA BR)")
    print("=" * 60)
    
    sucesso = testar_carregamento_funis()
    
    print("\n" + "=" * 60)
    if sucesso:
        print("üéâ VALIDA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("Os novos funis est√£o sendo carregados corretamente.")
    else:
        print("‚ùå VALIDA√á√ÉO FALHOU!")
        print("Verifique os erros acima e corrija antes de prosseguir.")
    print("=" * 60)
    
    return 0 if sucesso else 1

if __name__ == "__main__":
    sys.exit(main()) 