#!/usr/bin/env python3
"""
Script de Teste - Corre√ß√£o da L√≥gica de Conclus√£o Pipeline 104

Este script testa se a corre√ß√£o da l√≥gica de conclus√£o est√° funcionando corretamente,
verificando se fam√≠lias com cards em andamento no Pesquisa BR n√£o aparecem mais como 100% conclu√≠das.

Execu√ß√£o: python fix_pandas_import.py
"""

import sys
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
path_root = Path(__file__).parent
sys.path.append(str(path_root))

def testar_logica_conclusao():
    """
    Testa se a l√≥gica de conclus√£o do pipeline 104 est√° correta.
    """
    try:
        from views.cartorio_new.data_loader import carregar_dados_cartorio
        from views.cartorio_new.acompanhamento import calcular_conclusao_por_pipeline
        from views.cartorio_new.utils import simplificar_nome_estagio, categorizar_estagio
        import pandas as pd
        
        print("üîç Testando l√≥gica de conclus√£o do pipeline 104...")
        df = carregar_dados_cartorio()
        
        if df.empty:
            print("‚ùå DataFrame vazio - Verifique a conex√£o com o Bitrix")
            return False
        
        # Filtrar apenas registros do pipeline 104
        df_104 = df[df['CATEGORY_ID'].astype(str) == '104'].copy()
        
        if df_104.empty:
            print("‚ÑπÔ∏è Nenhum registro do pipeline 104 encontrado para testar")
            return True
        
        print(f"üìä Encontrados {len(df_104)} registros do pipeline 104 para an√°lise")
        
        # Processar est√°gios
        df_104['STAGE_ID'] = df_104['STAGE_ID'].astype(str)
        df_104['ESTAGIO_LEGIVEL'] = df_104['STAGE_ID'].apply(simplificar_nome_estagio)
        df_104['CATEGORIA_ESTAGIO'] = df_104['ESTAGIO_LEGIVEL'].apply(categorizar_estagio)
        
        # Aplicar fun√ß√£o de conclus√£o
        df_104['CONCLUIDA'] = df_104.apply(lambda row: calcular_conclusao_por_pipeline(row), axis=1)
        
        # Analisar resultados por est√°gio
        print("\nüìà An√°lise de conclus√£o por est√°gio:")
        
        analise_estagios = df_104.groupby(['ESTAGIO_LEGIVEL', 'CATEGORIA_ESTAGIO']).agg({
            'CONCLUIDA': ['count', 'sum']
        }).round(2)
        
        analise_estagios.columns = ['Total_Registros', 'Marcados_Como_Concluidos']
        analise_estagios = analise_estagios.reset_index()
        
        # Verificar especificamente "PESQUISA PRONTA PARA EMISS√ÉO"
        pronta_emissao = analise_estagios[
            analise_estagios['ESTAGIO_LEGIVEL'].str.contains('PESQUISA PRONTA PARA EMISS√ÉO', na=False)
        ]
        
        print("\nüîç Verifica√ß√£o espec√≠fica - 'PESQUISA PRONTA PARA EMISS√ÉO':")
        if not pronta_emissao.empty:
            for _, row in pronta_emissao.iterrows():
                total = row['Total_Registros']
                concluidos = row['Marcados_Como_Concluidos']
                
                print(f"  ‚Ä¢ {row['ESTAGIO_LEGIVEL']}: {concluidos}/{total} marcados como conclu√≠dos")
                
                if concluidos > 0:
                    print("  ‚ùå ERRO: Registros 'PRONTA PARA EMISS√ÉO' est√£o sendo marcados como conclu√≠dos!")
                    print("  üí° Isso significa que a corre√ß√£o n√£o foi aplicada corretamente.")
                    return False
                else:
                    print("  ‚úÖ CORRETO: Registros 'PRONTA PARA EMISS√ÉO' N√ÉO est√£o sendo marcados como conclu√≠dos")
        else:
            print("  ‚ÑπÔ∏è Nenhum registro 'PESQUISA PRONTA PARA EMISS√ÉO' encontrado")
        
        # Mostrar estat√≠sticas gerais
        print(f"\nüìä Estat√≠sticas gerais do pipeline 104:")
        print(f"  ‚Ä¢ Total de registros: {len(df_104)}")
        print(f"  ‚Ä¢ Marcados como conclu√≠dos: {df_104['CONCLUIDA'].sum()}")
        print(f"  ‚Ä¢ Taxa de conclus√£o: {df_104['CONCLUIDA'].mean() * 100:.1f}%")
        
        # Mostrar distribui√ß√£o por est√°gio
        print(f"\nüìã Distribui√ß√£o por est√°gio:")
        for _, row in analise_estagios.iterrows():
            estagio = row['ESTAGIO_LEGIVEL']
            categoria = row['CATEGORIA_ESTAGIO']
            total = int(row['Total_Registros'])
            concluidos = int(row['Marcados_Como_Concluidos'])
            taxa = (concluidos / total * 100) if total > 0 else 0
            
            status_icon = "‚úÖ" if concluidos == 0 and "PRONTA" in estagio else "üìä"
            print(f"  {status_icon} {estagio} ({categoria}): {concluidos}/{total} ({taxa:.1f}%)")
        
        # Teste de fam√≠lia espec√≠fica (se existir)
        if 'UF_CRM_34_NOME_FAMILIA' in df_104.columns:
            print(f"\nüè† Teste de fam√≠lias espec√≠ficas:")
            familias_104 = df_104['UF_CRM_34_NOME_FAMILIA'].value_counts().head(3)
            
            for familia, count in familias_104.items():
                if familia and familia != 'Fam√≠lia Desconhecida':
                    familia_data = df_104[df_104['UF_CRM_34_NOME_FAMILIA'] == familia]
                    concluidas_familia = familia_data['CONCLUIDA'].sum()
                    total_familia = len(familia_data)
                    perc_familia = (concluidas_familia / total_familia * 100) if total_familia > 0 else 0
                    
                    print(f"  ‚Ä¢ {familia}: {concluidas_familia}/{total_familia} conclu√≠das ({perc_familia:.1f}%)")
                    
                    # Verificar se tem "PRONTA PARA EMISS√ÉO" n√£o conclu√≠da
                    pronta_nao_concluida = familia_data[
                        (familia_data['ESTAGIO_LEGIVEL'].str.contains('PESQUISA PRONTA PARA EMISS√ÉO', na=False)) &
                        (familia_data['CONCLUIDA'] == False)
                    ]
                    
                    if not pronta_nao_concluida.empty:
                        print(f"    ‚úÖ Tem {len(pronta_nao_concluida)} registros 'PRONTA' corretamente N√ÉO marcados como conclu√≠dos")
        
        print("\n‚úÖ Teste da l√≥gica de conclus√£o conclu√≠do com sucesso!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """
    Fun√ß√£o principal do script de teste.
    """
    print("=" * 70)
    print("üß™ TESTE DA CORRE√á√ÉO - L√ìGICA DE CONCLUS√ÉO PIPELINE 104")
    print("=" * 70)
    
    sucesso = testar_logica_conclusao()
    
    print("\n" + "=" * 70)
    if sucesso:
        print("üéâ TESTE CONCLU√çDO COM SUCESSO!")
        print("A l√≥gica de conclus√£o do pipeline 104 est√° funcionando corretamente.")
        print("Fam√≠lias com 'PESQUISA PRONTA PARA EMISS√ÉO' n√£o ser√£o mais marcadas como 100% conclu√≠das.")
    else:
        print("‚ùå TESTE FALHOU!")
        print("A corre√ß√£o n√£o foi aplicada corretamente. Verifique os erros acima.")
    print("=" * 70)
    
    return 0 if sucesso else 1

if __name__ == "__main__":
    sys.exit(main()) 