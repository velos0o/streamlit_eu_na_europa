#!/usr/bin/env python3
"""
Script de Teste - Corre√ß√£o da Coluna "Pasta C/Emiss√£o Conclu√≠da"

Este script testa se a corre√ß√£o da coluna "Pasta C/Emiss√£o Conclu√≠da" no higienizacao_desempenho.py
est√° funcionando corretamente, verificando se fam√≠lias com pipeline 104 em andamento
n√£o s√£o mais marcadas incorretamente como conclu√≠das.

Execu√ß√£o: python fix_series_comparison.py
"""

import sys
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
path_root = Path(__file__).parent
sys.path.append(str(path_root))

def testar_pasta_c_emissao_concluida():
    """
    Testa se a coluna "Pasta C/Emiss√£o Conclu√≠da" est√° calculada corretamente.
    """
    try:
        from views.cartorio_new.data_loader import carregar_dados_cartorio
        from views.cartorio_new.higienizacao_desempenho import calcular_conclusao_corrigida_por_pipeline
        import pandas as pd
        import numpy as np
        
        print("üîç Testando c√°lculo da coluna 'Pasta C/Emiss√£o Conclu√≠da'...")
        df = carregar_dados_cartorio()
        
        if df.empty:
            print("‚ùå DataFrame vazio - Verifique a conex√£o com o Bitrix")
            return False
        
        print(f"üìä Carregados {len(df)} registros para an√°lise")
        
        # Simular o processamento do higienizacao_desempenho.py
        col_id_familia_bitrix = 'UF_CRM_34_ID_FAMILIA'
        
        if col_id_familia_bitrix not in df.columns:
            print(f"‚ùå Coluna {col_id_familia_bitrix} n√£o encontrada")
            return False
        
        # Aplicar a fun√ß√£o de conclus√£o corrigida
        df['CONCLUIDA_CORRIGIDA'] = df.apply(
            lambda row: calcular_conclusao_corrigida_por_pipeline(row), axis=1
        )
        
        # Agrupar por fam√≠lia e calcular conclus√£o
        conclusao_por_familia = df.groupby(col_id_familia_bitrix).agg({
            'CONCLUIDA_CORRIGIDA': ['count', 'sum'],
            'CATEGORY_ID': lambda x: list(x.astype(str).unique())  # Pipelines da fam√≠lia
        })
        conclusao_por_familia.columns = ['total_certidoes', 'total_concluidas', 'pipelines']
        conclusao_por_familia = conclusao_por_familia.reset_index()
        
        # Calcular se fam√≠lia est√° conclu√≠da
        conclusao_por_familia['familia_concluida'] = (
            (conclusao_por_familia['total_certidoes'] > 0) &
            (conclusao_por_familia['total_concluidas'] == conclusao_por_familia['total_certidoes'])
        ).astype(int)
        
        # Estat√≠sticas gerais
        total_familias = len(conclusao_por_familia)
        familias_concluidas = conclusao_por_familia['familia_concluida'].sum()
        
        print(f"\nüìä Estat√≠sticas Gerais:")
        print(f"  ‚Ä¢ Total de fam√≠lias: {total_familias:,}")
        print(f"  ‚Ä¢ Fam√≠lias marcadas como conclu√≠das: {familias_concluidas:,}")
        print(f"  ‚Ä¢ Taxa de conclus√£o: {(familias_concluidas/total_familias*100):.1f}%")
        
        # Verificar especificamente fam√≠lias com pipeline 104
        familias_com_104 = conclusao_por_familia[
            conclusao_por_familia['pipelines'].apply(lambda x: '104' in x)
        ]
        
        print(f"\nüîç An√°lise espec√≠fica - Fam√≠lias com Pipeline 104:")
        if not familias_com_104.empty:
            total_104 = len(familias_com_104)
            concluidas_104 = familias_com_104['familia_concluida'].sum()
            
            print(f"  ‚Ä¢ Total de fam√≠lias com pipeline 104: {total_104:,}")
            print(f"  ‚Ä¢ Marcadas como conclu√≠das: {concluidas_104:,}")
            print(f"  ‚Ä¢ Taxa de conclus√£o: {(concluidas_104/total_104*100):.1f}%")
            
            # Verificar fam√≠lias que t√™m 104 E outros pipelines
            familias_104_mistas = familias_com_104[
                familias_com_104['pipelines'].apply(
                    lambda x: len([p for p in x if p in ['92', '94', '102']]) > 0
                )
            ]
            
            if not familias_104_mistas.empty:
                total_mistas = len(familias_104_mistas)
                concluidas_mistas = familias_104_mistas['familia_concluida'].sum()
                
                print(f"\n  üìä Fam√≠lias com 104 + outros pipelines:")
                print(f"    ‚Ä¢ Total: {total_mistas:,}")
                print(f"    ‚Ä¢ Conclu√≠das: {concluidas_mistas:,}")
                print(f"    ‚Ä¢ Taxa: {(concluidas_mistas/total_mistas*100):.1f}%")
                
                # Mostrar alguns exemplos
                print(f"\n  üîç Exemplos de fam√≠lias mistas:")
                for i, (_, row) in enumerate(familias_104_mistas.head(3).iterrows()):
                    id_familia = row[col_id_familia_bitrix]
                    pipelines = ', '.join(row['pipelines'])
                    concluida = "SIM" if row['familia_concluida'] else "N√ÉO"
                    certidoes = row['total_certidoes']
                    finalizadas = row['total_concluidas']
                    
                    print(f"    {i+1}. Fam√≠lia {id_familia}: Pipelines [{pipelines}]")
                    print(f"       Certid√µes: {finalizadas}/{certidoes} finalizadas - Conclu√≠da: {concluida}")
        else:
            print("  ‚ÑπÔ∏è Nenhuma fam√≠lia com pipeline 104 encontrada")
        
        # Verificar se h√° fam√≠lias que deveriam estar sendo corrigidas
        print(f"\nüß™ Teste de Regress√£o - Fam√≠lias que tinham problema:")
        
        # Buscar fam√≠lias que t√™m pipeline 104 n√£o finalizado mas outros pipelines ativos
        df_104 = df[df['CATEGORY_ID'].astype(str) == '104'].copy()
        
        if not df_104.empty:
            # Simular a l√≥gica antiga (problem√°tica) vs nova (corrigida)
            df_104['STAGE_ID'] = df_104['STAGE_ID'].astype(str)
            
            # Contar registros "PRONTA PARA EMISS√ÉO" (que eram o problema)
            pronta_emissao = df_104[df_104['STAGE_ID'].str.contains('SUCCESS', na=False)]
            
            if not pronta_emissao.empty:
                print(f"  ‚Ä¢ Encontrados {len(pronta_emissao)} registros pipeline 104 'SUCCESS'")
                
                # Ver quantos desses est√£o sendo corretamente N√ÉO marcados como conclu√≠dos
                nao_concluidos_corretamente = pronta_emissao[pronta_emissao['CONCLUIDA_CORRIGIDA'] == False]
                
                if len(nao_concluidos_corretamente) > 0:
                    print(f"  ‚úÖ {len(nao_concluidos_corretamente)} registros 'SUCCESS' corretamente N√ÉO marcados como conclu√≠dos")
                else:
                    print(f"  ‚ö†Ô∏è Todos os registros 'SUCCESS' est√£o sendo marcados como conclu√≠dos")
                    
                # Verificar as fam√≠lias desses registros
                familias_afetadas = pronta_emissao[col_id_familia_bitrix].unique()
                print(f"  ‚Ä¢ {len(familias_afetadas)} fam√≠lias t√™m registros pipeline 104 'SUCCESS'")
                
                # Ver se essas fam√≠lias est√£o sendo corretamente calculadas
                familias_problematicas = conclusao_por_familia[
                    conclusao_por_familia[col_id_familia_bitrix].isin(familias_afetadas)
                ]
                
                if not familias_problematicas.empty:
                    incorretamente_concluidas = familias_problematicas[
                        (familias_problematicas['familia_concluida'] == 1) &
                        (familias_problematicas['total_concluidas'] < familias_problematicas['total_certidoes'])
                    ]
                    
                    if len(incorretamente_concluidas) > 0:
                        print(f"  ‚ùå PROBLEMA: {len(incorretamente_concluidas)} fam√≠lias ainda marcadas incorretamente como conclu√≠das")
                        return False
                    else:
                        print(f"  ‚úÖ CORRETO: Todas as fam√≠lias est√£o sendo calculadas corretamente")
        
        print("\n‚úÖ Teste da coluna 'Pasta C/Emiss√£o Conclu√≠da' conclu√≠do com sucesso!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """
    Fun√ß√£o principal do script de teste.
    """
    print("=" * 80)
    print("üß™ TESTE DA CORRE√á√ÉO - COLUNA 'PASTA C/EMISS√ÉO CONCLU√çDA'")
    print("=" * 80)
    
    sucesso = testar_pasta_c_emissao_concluida()
    
    print("\n" + "=" * 80)
    if sucesso:
        print("üéâ TESTE CONCLU√çDO COM SUCESSO!")
        print("A coluna 'Pasta C/Emiss√£o Conclu√≠da' est√° sendo calculada corretamente.")
        print("Fam√≠lias com pipeline 104 em andamento n√£o s√£o mais marcadas incorretamente.")
    else:
        print("‚ùå TESTE FALHOU!")
        print("A corre√ß√£o n√£o foi aplicada corretamente. Verifique os erros acima.")
    print("=" * 80)
    
    return 0 if sucesso else 1

if __name__ == "__main__":
    sys.exit(main()) 