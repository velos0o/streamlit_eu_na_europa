import streamlit as st
import re

# Dicion√°rio com termos de busca e seus destinos
SEARCH_INDEX = {
    # Termos para Macro Higieniza√ß√£o
    "dashboard": "Macro Higieniza√ß√£o",
    "vis√£o geral": "Macro Higieniza√ß√£o",
    "resumo": "Macro Higieniza√ß√£o",
    "m√©tricas gerais": "Macro Higieniza√ß√£o",
    "status atual": "Macro Higieniza√ß√£o",
    "√∫ltima atualiza√ß√£o": "Macro Higieniza√ß√£o",
    "processos pendentes": "Macro Higieniza√ß√£o",
    "processos em andamento": "Macro Higieniza√ß√£o",
    "total de processos": "Macro Higieniza√ß√£o",
    "status geral": "Macro Higieniza√ß√£o",
    "overview": "Macro Higieniza√ß√£o",
    "processos completos": "Macro Higieniza√ß√£o",
    "situa√ß√£o atual": "Macro Higieniza√ß√£o",
    
    # Termos para Produ√ß√£o Higieniza√ß√£o
    "produ√ß√£o": "Produ√ß√£o Higieniza√ß√£o",
    "produtividade": "Produ√ß√£o Higieniza√ß√£o",
    "respons√°veis": "Produ√ß√£o Higieniza√ß√£o",
    "equipe": "Produ√ß√£o Higieniza√ß√£o",
    "distribui√ß√£o": "Produ√ß√£o Higieniza√ß√£o",
    "tend√™ncias": "Produ√ß√£o Higieniza√ß√£o",
    "gr√°ficos": "Produ√ß√£o Higieniza√ß√£o",
    "pend√™ncias": "Produ√ß√£o Higieniza√ß√£o",
    "produtividade por pessoa": "Produ√ß√£o Higieniza√ß√£o",
    "ranking de produ√ß√£o": "Produ√ß√£o Higieniza√ß√£o",
    "processos atribu√≠dos": "Produ√ß√£o Higieniza√ß√£o",
    "atribui√ß√µes": "Produ√ß√£o Higieniza√ß√£o",
    "desempenho da equipe": "Produ√ß√£o Higieniza√ß√£o",
    "evolu√ß√£o da produ√ß√£o": "Produ√ß√£o Higieniza√ß√£o",
    "tempo m√©dio por processo": "Produ√ß√£o Higieniza√ß√£o",
    "processos por respons√°vel": "Produ√ß√£o Higieniza√ß√£o",
    "atrasos": "Produ√ß√£o Higieniza√ß√£o",
    "status por respons√°vel": "Produ√ß√£o Higieniza√ß√£o",
    
    # Termos para Conclus√µes Higieniza√ß√£o
    "conclus√µes": "Conclus√µes Higieniza√ß√£o",
    "finalizados": "Conclus√µes Higieniza√ß√£o",
    "completados": "Conclus√µes Higieniza√ß√£o",
    "qualidade": "Conclus√µes Higieniza√ß√£o",
    "tempo m√©dio": "Conclus√µes Higieniza√ß√£o",
    "efici√™ncia": "Conclus√µes Higieniza√ß√£o",
    "processos conclu√≠dos": "Conclus√µes Higieniza√ß√£o",
    "taxa de conclus√£o": "Conclus√µes Higieniza√ß√£o",
    "hist√≥rico de conclus√µes": "Conclus√µes Higieniza√ß√£o",
    "an√°lise de qualidade": "Conclus√µes Higieniza√ß√£o",
    "tempo de processamento": "Conclus√µes Higieniza√ß√£o",
    "avalia√ß√£o dos processos": "Conclus√µes Higieniza√ß√£o",
    "finaliza√ß√µes por per√≠odo": "Conclus√µes Higieniza√ß√£o",
    "problemas identificados": "Conclus√µes Higieniza√ß√£o",
    "m√©tricas de qualidade": "Conclus√µes Higieniza√ß√£o",
    
    # Termos para Cart√≥rio
    "cart√≥rio": "Cart√≥rio",
    "funil": "Cart√≥rio",
    "emiss√µes": "Cart√≥rio",
    "pipeline": "Cart√≥rio",
    "convers√£o": "Cart√≥rio",
    "est√°gios": "Cart√≥rio",
    "gargalos": "Cart√≥rio",
    "certid√µes": "Cart√≥rio", 
    "certid√µes entregues": "Cart√≥rio",
    "entrega de certid√µes": "Cart√≥rio",
    "documentos emitidos": "Cart√≥rio",
    "emiss√£o de documentos": "Cart√≥rio",
    "documentos pendentes": "Cart√≥rio",
    "funil de emiss√µes": "Cart√≥rio",
    "progresso das emiss√µes": "Cart√≥rio",
    "certificados": "Cart√≥rio",
    "documenta√ß√£o": "Cart√≥rio",
    "etapas do processo": "Cart√≥rio",
    "tempo de emiss√£o": "Cart√≥rio",
    "taxa de aprova√ß√£o": "Cart√≥rio",
    "rejei√ß√µes": "Cart√≥rio",
    "tr√¢mites": "Cart√≥rio",
    "solicita√ß√µes pendentes": "Cart√≥rio",
    "processos em tramita√ß√£o": "Cart√≥rio",
    "bitrix cart√≥rio": "Cart√≥rio",
    "bitrix emiss√µes": "Cart√≥rio",
    
    # Termos para Comune
    "comune": "Comune",
    "comunidade": "Comune",
    "intera√ß√µes": "Comune",
    "usu√°rios": "Comune",
    "engajamento": "Comune",
    "participa√ß√£o": "Comune",
    "atividade de usu√°rios": "Comune",
    "comunica√ß√£o interna": "Comune",
    "frequ√™ncia de uso": "Comune",
    "colabora√ß√£o": "Comune",
    "mensagens trocadas": "Comune",
    "grupos ativos": "Comune",
    "membros ativos": "Comune",
    "intera√ß√£o entre equipes": "Comune",
    "compartilhamento": "Comune",
    "bitrix comune": "Comune",
    "bitrix social": "Comune",
    
    # Termos para Extra√ß√µes
    "extra√ß√µes": "Extra√ß√µes de Dados",
    "exportar": "Extra√ß√µes de Dados",
    "relat√≥rios": "Extra√ß√µes de Dados",
    "consultas": "Extra√ß√µes de Dados",
    "download": "Extra√ß√µes de Dados",
    "csv": "Extra√ß√µes de Dados",
    "excel": "Extra√ß√µes de Dados",
    "exporta√ß√£o de dados": "Extra√ß√µes de Dados",
    "relat√≥rios personalizados": "Extra√ß√µes de Dados",
    "dados brutos": "Extra√ß√µes de Dados",
    "extra√ß√£o personalizada": "Extra√ß√µes de Dados",
    "dados para an√°lise": "Extra√ß√µes de Dados",
    "baixar relat√≥rio": "Extra√ß√µes de Dados",
    "exportar para excel": "Extra√ß√µes de Dados",
    "formato de arquivo": "Extra√ß√µes de Dados",
    "api bitrix": "Extra√ß√µes de Dados",
    "dados do crm": "Extra√ß√µes de Dados",
    
    # Termos para Apresenta√ß√£o
    "apresenta√ß√£o": "Apresenta√ß√£o Conclus√µes",
    "slides": "Apresenta√ß√£o Conclus√µes",
    "tv": "Apresenta√ß√£o Conclus√µes",
    "modo tv": "Apresenta√ß√£o Conclus√µes",
    "autom√°tico": "Apresenta√ß√£o Conclus√µes",
    "apresenta√ß√£o em tela cheia": "Apresenta√ß√£o Conclus√µes",
    "modo de exibi√ß√£o": "Apresenta√ß√£o Conclus√µes",
    "apresenta√ß√£o de slides": "Apresenta√ß√£o Conclus√µes",
    "modo apresenta√ß√£o": "Apresenta√ß√£o Conclus√µes",
    "visualiza√ß√£o para tv": "Apresenta√ß√£o Conclus√µes",
    "display autom√°tico": "Apresenta√ß√£o Conclus√µes",
    "rota√ß√£o de slides": "Apresenta√ß√£o Conclus√µes"
}

def search_report(query):
    """
    Realiza uma busca no √≠ndice de termos do relat√≥rio.
    
    Args:
        query (str): O termo de busca do usu√°rio
        
    Returns:
        list: Lista de p√°ginas relevantes para a busca
    """
    if not query or len(query.strip()) < 3:
        return []
    
    query = query.lower().strip()
    results = {}
    
    # Busca exata
    for term, page in SEARCH_INDEX.items():
        if query == term.lower():
            if page not in results:
                results[page] = 1.0
            else:
                results[page] += 1.0
    
    # Busca parcial
    for term, page in SEARCH_INDEX.items():
        # Correspond√™ncia parcial no in√≠cio do termo (maior relev√¢ncia)
        if term.lower().startswith(query):
            if page not in results:
                results[page] = 0.8
            else:
                results[page] += 0.8
        
        # Correspond√™ncia parcial em qualquer parte do termo
        elif query in term.lower():
            if page not in results:
                results[page] = 0.5
            else:
                results[page] += 0.5
        
        # Correspond√™ncia por palavras individuais
        else:
            query_words = query.split()
            for word in query_words:
                if len(word) > 2 and word in term.lower():
                    if page not in results:
                        results[page] = 0.3
                    else:
                        results[page] += 0.3
    
    # Ordenar resultados por relev√¢ncia
    sorted_results = sorted(results.items(), key=lambda x: x[1], reverse=True)
    return [page for page, score in sorted_results if score > 0.2]

def show_search_box():
    """
    Exibe uma caixa de pesquisa para navegar pelo relat√≥rio.
    """
    with st.sidebar:
        st.markdown("### üîç Buscar no Relat√≥rio")
        query = st.text_input("Digite o que procura", key="search_query", placeholder="Ex: certid√µes entregues, produtividade...")
        
        if query:
            results = search_report(query)
            
            if results:
                st.success(f"Encontrado em {len(results)} se√ß√µes")
                
                for page in results:
                    # Extrai a fun√ß√£o para a p√°gina correspondente
                    page_function = None
                    if page == "Macro Higieniza√ß√£o":
                        page_function = lambda: st.session_state.update({"pagina_atual": "Macro Higieniza√ß√£o"})
                    elif page == "Produ√ß√£o Higieniza√ß√£o":
                        page_function = lambda: st.session_state.update({"pagina_atual": "Produ√ß√£o Higieniza√ß√£o"})
                    elif page == "Conclus√µes Higieniza√ß√£o":
                        page_function = lambda: st.session_state.update({"pagina_atual": "Conclus√µes Higieniza√ß√£o"})
                    elif page == "Cart√≥rio":
                        page_function = lambda: st.session_state.update({"pagina_atual": "Cart√≥rio"})
                    elif page == "Comune":
                        page_function = lambda: st.session_state.update({"pagina_atual": "Comune"})
                    elif page == "Extra√ß√µes de Dados":
                        page_function = lambda: st.session_state.update({"pagina_atual": "Extra√ß√µes de Dados"})
                    elif page == "Apresenta√ß√£o Conclus√µes":
                        page_function = lambda: st.session_state.update({"pagina_atual": "Apresenta√ß√£o Conclus√µes"})
                    
                    # Cria um bot√£o para navegar para a p√°gina
                    if page_function:
                        st.button(f"Ir para: {page}", key=f"goto_{page}", on_click=page_function, use_container_width=True)
            else:
                st.warning("Nenhum resultado encontrado. Tente outros termos similares como 'documentos emitidos' ou 'certid√µes'.")
                
                # Sugest√µes de pesquisa quando n√£o h√° resultados
                st.markdown("#### Sugest√µes:")
                sugestoes = {
                    "Certid√µes": "Cart√≥rio",
                    "Produtividade": "Produ√ß√£o Higieniza√ß√£o",
                    "Conclu√≠dos": "Conclus√µes Higieniza√ß√£o"
                }
                
                for termo, pagina in sugestoes.items():
                    if page_function := {
                        "Macro Higieniza√ß√£o": lambda: st.session_state.update({"pagina_atual": "Macro Higieniza√ß√£o"}),
                        "Produ√ß√£o Higieniza√ß√£o": lambda: st.session_state.update({"pagina_atual": "Produ√ß√£o Higieniza√ß√£o"}),
                        "Conclus√µes Higieniza√ß√£o": lambda: st.session_state.update({"pagina_atual": "Conclus√µes Higieniza√ß√£o"}),
                        "Cart√≥rio": lambda: st.session_state.update({"pagina_atual": "Cart√≥rio"}),
                        "Comune": lambda: st.session_state.update({"pagina_atual": "Comune"}),
                        "Extra√ß√µes de Dados": lambda: st.session_state.update({"pagina_atual": "Extra√ß√µes de Dados"}),
                        "Apresenta√ß√£o Conclus√µes": lambda: st.session_state.update({"pagina_atual": "Apresenta√ß√£o Conclus√µes"})
                    }.get(pagina):
                        st.button(f"Buscar: {termo}", key=f"suggest_{termo}", on_click=page_function)

def add_search_term(term, page):
    """
    Adiciona um novo termo ao √≠ndice de busca.
    √ötil para manter o √≠ndice atualizado com novos conte√∫dos.
    
    Args:
        term (str): O termo a ser adicionado
        page (str): A p√°gina associada ao termo
    """
    global SEARCH_INDEX
    SEARCH_INDEX[term.lower()] = page 